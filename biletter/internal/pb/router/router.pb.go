// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.29.2
// source: router.proto

package router

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CorrectResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps []*Step `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *CorrectResultResponse) Reset() {
	*x = CorrectResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectResultResponse) ProtoMessage() {}

func (x *CorrectResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectResultResponse.ProtoReflect.Descriptor instead.
func (*CorrectResultResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{0}
}

func (x *CorrectResultResponse) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

type ResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ResultResponse_Error
	//	*ResultResponse_CorrectResultResponse
	Response isResultResponse_Response `protobuf_oneof:"response"`
}

func (x *ResultResponse) Reset() {
	*x = ResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultResponse) ProtoMessage() {}

func (x *ResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultResponse.ProtoReflect.Descriptor instead.
func (*ResultResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{1}
}

func (m *ResultResponse) GetResponse() isResultResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ResultResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ResultResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ResultResponse) GetCorrectResultResponse() *CorrectResultResponse {
	if x, ok := x.GetResponse().(*ResultResponse_CorrectResultResponse); ok {
		return x.CorrectResultResponse
	}
	return nil
}

type isResultResponse_Response interface {
	isResultResponse_Response()
}

type ResultResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ResultResponse_CorrectResultResponse struct {
	CorrectResultResponse *CorrectResultResponse `protobuf:"bytes,2,opt,name=correctResultResponse,proto3,oneof"`
}

func (*ResultResponse_Error) isResultResponse_Response() {}

func (*ResultResponse_CorrectResultResponse) isResultResponse_Response() {}

type StepSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ByEds        bool   `protobuf:"varint,2,opt,name=by_eds,json=byEds,proto3" json:"by_eds,omitempty"`
	ByCompanyEds bool   `protobuf:"varint,10,opt,name=by_company_eds,json=byCompanyEds,proto3" json:"by_company_eds,omitempty"`
	InSeries     bool   `protobuf:"varint,3,opt,name=in_series,json=inSeries,proto3" json:"in_series,omitempty"`
	NeedConfirm  bool   `protobuf:"varint,4,opt,name=need_confirm,json=needConfirm,proto3" json:"need_confirm,omitempty"`
	WaitDelegate bool   `protobuf:"varint,5,opt,name=wait_delegate,json=waitDelegate,proto3" json:"wait_delegate,omitempty"`
	CanAddPart   bool   `protobuf:"varint,6,opt,name=can_add_part,json=canAddPart,proto3" json:"can_add_part,omitempty"`
	CanDelegate  bool   `protobuf:"varint,7,opt,name=can_delegate,json=canDelegate,proto3" json:"can_delegate,omitempty"`
	CanDecline   bool   `protobuf:"varint,8,opt,name=can_decline,json=canDecline,proto3" json:"can_decline,omitempty"`
	FilesAccess  uint32 `protobuf:"varint,9,opt,name=files_access,json=filesAccess,proto3" json:"files_access,omitempty"`
}

func (x *StepSettings) Reset() {
	*x = StepSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepSettings) ProtoMessage() {}

func (x *StepSettings) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepSettings.ProtoReflect.Descriptor instead.
func (*StepSettings) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{2}
}

func (x *StepSettings) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StepSettings) GetByEds() bool {
	if x != nil {
		return x.ByEds
	}
	return false
}

func (x *StepSettings) GetByCompanyEds() bool {
	if x != nil {
		return x.ByCompanyEds
	}
	return false
}

func (x *StepSettings) GetInSeries() bool {
	if x != nil {
		return x.InSeries
	}
	return false
}

func (x *StepSettings) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

func (x *StepSettings) GetWaitDelegate() bool {
	if x != nil {
		return x.WaitDelegate
	}
	return false
}

func (x *StepSettings) GetCanAddPart() bool {
	if x != nil {
		return x.CanAddPart
	}
	return false
}

func (x *StepSettings) GetCanDelegate() bool {
	if x != nil {
		return x.CanDelegate
	}
	return false
}

func (x *StepSettings) GetCanDecline() bool {
	if x != nil {
		return x.CanDecline
	}
	return false
}

func (x *StepSettings) GetFilesAccess() uint32 {
	if x != nil {
		return x.FilesAccess
	}
	return 0
}

type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings      *StepSettings  `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
	Action        string         `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Index         uint32         `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	UnderRevision bool           `protobuf:"varint,5,opt,name=under_revision,json=underRevision,proto3" json:"under_revision,omitempty"`
	IsOld         bool           `protobuf:"varint,3,opt,name=is_old,json=isOld,proto3" json:"is_old,omitempty"`
	IsActual      bool           `protobuf:"varint,7,opt,name=is_actual,json=isActual,proto3" json:"is_actual,omitempty"`
	Participants  []*Participant `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{3}
}

func (x *Step) GetSettings() *StepSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Step) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Step) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Step) GetUnderRevision() bool {
	if x != nil {
		return x.UnderRevision
	}
	return false
}

func (x *Step) GetIsOld() bool {
	if x != nil {
		return x.IsOld
	}
	return false
}

func (x *Step) GetIsActual() bool {
	if x != nil {
		return x.IsActual
	}
	return false
}

func (x *Step) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

type ResultComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string               `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	HasFiles bool                 `protobuf:"varint,2,opt,name=has_files,json=hasFiles,proto3" json:"has_files,omitempty"`
	Files    []*ResultCommentFile `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ResultComment) Reset() {
	*x = ResultComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultComment) ProtoMessage() {}

func (x *ResultComment) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultComment.ProtoReflect.Descriptor instead.
func (*ResultComment) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{4}
}

func (x *ResultComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ResultComment) GetHasFiles() bool {
	if x != nil {
		return x.HasFiles
	}
	return false
}

func (x *ResultComment) GetFiles() []*ResultCommentFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type ResultCommentFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HashName string `protobuf:"bytes,2,opt,name=hash_name,json=hashName,proto3" json:"hash_name,omitempty"`
}

func (x *ResultCommentFile) Reset() {
	*x = ResultCommentFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultCommentFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultCommentFile) ProtoMessage() {}

func (x *ResultCommentFile) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultCommentFile.ProtoReflect.Descriptor instead.
func (*ResultCommentFile) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{5}
}

func (x *ResultCommentFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResultCommentFile) GetHashName() string {
	if x != nil {
		return x.HashName
	}
	return ""
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code            string         `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name            string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Position        string         `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Result          string         `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	DecisionDate    string         `protobuf:"bytes,6,opt,name=decision_date,json=decisionDate,proto3" json:"decision_date,omitempty"`
	DecisionComment *ResultComment `protobuf:"bytes,7,opt,name=decision_comment,json=decisionComment,proto3" json:"decision_comment,omitempty"`
	DelegateComment *ResultComment `protobuf:"bytes,8,opt,name=delegate_comment,json=delegateComment,proto3" json:"delegate_comment,omitempty"`
	Invited         string         `protobuf:"bytes,9,opt,name=invited,proto3" json:"invited,omitempty"`
	Delegates       []*Participant `protobuf:"bytes,10,rep,name=delegates,proto3" json:"delegates,omitempty"`
	Success         bool           `protobuf:"varint,11,opt,name=success,proto3" json:"success,omitempty"`
	NeedAlteration  bool           `protobuf:"varint,12,opt,name=need_alteration,json=needAlteration,proto3" json:"need_alteration,omitempty"`
	SuccessSet      bool           `protobuf:"varint,13,opt,name=success_set,json=successSet,proto3" json:"success_set,omitempty"`
	IsActual        bool           `protobuf:"varint,14,opt,name=is_actual,json=isActual,proto3" json:"is_actual,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{6}
}

func (x *Participant) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Participant) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Participant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Participant) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Participant) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Participant) GetDecisionDate() string {
	if x != nil {
		return x.DecisionDate
	}
	return ""
}

func (x *Participant) GetDecisionComment() *ResultComment {
	if x != nil {
		return x.DecisionComment
	}
	return nil
}

func (x *Participant) GetDelegateComment() *ResultComment {
	if x != nil {
		return x.DelegateComment
	}
	return nil
}

func (x *Participant) GetInvited() string {
	if x != nil {
		return x.Invited
	}
	return ""
}

func (x *Participant) GetDelegates() []*Participant {
	if x != nil {
		return x.Delegates
	}
	return nil
}

func (x *Participant) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Participant) GetNeedAlteration() bool {
	if x != nil {
		return x.NeedAlteration
	}
	return false
}

func (x *Participant) GetSuccessSet() bool {
	if x != nil {
		return x.SuccessSet
	}
	return false
}

func (x *Participant) GetIsActual() bool {
	if x != nil {
		return x.IsActual
	}
	return false
}

type ResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *ResultRequest) Reset() {
	*x = ResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultRequest) ProtoMessage() {}

func (x *ResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultRequest.ProtoReflect.Descriptor instead.
func (*ResultRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{7}
}

func (x *ResultRequest) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type RouterDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId []uint32 `protobuf:"varint,1,rep,packed,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	IsOwner bool     `protobuf:"varint,2,opt,name=is_owner,json=isOwner,proto3" json:"is_owner,omitempty"`
}

func (x *RouterDetailsRequest) Reset() {
	*x = RouterDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterDetailsRequest) ProtoMessage() {}

func (x *RouterDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterDetailsRequest.ProtoReflect.Descriptor instead.
func (*RouterDetailsRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{8}
}

func (x *RouterDetailsRequest) GetRouteId() []uint32 {
	if x != nil {
		return x.RouteId
	}
	return nil
}

func (x *RouterDetailsRequest) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	FileName      string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	HashName      string `protobuf:"bytes,3,opt,name=hash_name,json=hashName,proto3" json:"hash_name,omitempty"`
	Author        string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	ContentLength string `protobuf:"bytes,5,opt,name=contentLength,proto3" json:"contentLength,omitempty"`
	FileExst      string `protobuf:"bytes,8,opt,name=fileExst,proto3" json:"fileExst,omitempty"`
	Created       string `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	Comment       string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{9}
}

func (x *File) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *File) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *File) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *File) GetHashName() string {
	if x != nil {
		return x.HashName
	}
	return ""
}

func (x *File) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *File) GetContentLength() string {
	if x != nil {
		return x.ContentLength
	}
	return ""
}

func (x *File) GetFileExst() string {
	if x != nil {
		return x.FileExst
	}
	return ""
}

func (x *File) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *File) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type CorrectRouterDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points        []*CorrectRouterDetailsResponse_RouterDetails `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	DecFiles      []*File                                       `protobuf:"bytes,2,rep,name=dec_files,json=decFiles,proto3" json:"dec_files,omitempty"`
	Notify        bool                                          `protobuf:"varint,3,opt,name=notify,proto3" json:"notify,omitempty"`
	HasResolution bool                                          `protobuf:"varint,5,opt,name=has_resolution,json=hasResolution,proto3" json:"has_resolution,omitempty"`
	CommentsCount *CorrectRouterDetailsResponse_CommentCount    `protobuf:"bytes,4,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
}

func (x *CorrectRouterDetailsResponse) Reset() {
	*x = CorrectRouterDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectRouterDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectRouterDetailsResponse) ProtoMessage() {}

func (x *CorrectRouterDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectRouterDetailsResponse.ProtoReflect.Descriptor instead.
func (*CorrectRouterDetailsResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{10}
}

func (x *CorrectRouterDetailsResponse) GetPoints() []*CorrectRouterDetailsResponse_RouterDetails {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *CorrectRouterDetailsResponse) GetDecFiles() []*File {
	if x != nil {
		return x.DecFiles
	}
	return nil
}

func (x *CorrectRouterDetailsResponse) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

func (x *CorrectRouterDetailsResponse) GetHasResolution() bool {
	if x != nil {
		return x.HasResolution
	}
	return false
}

func (x *CorrectRouterDetailsResponse) GetCommentsCount() *CorrectRouterDetailsResponse_CommentCount {
	if x != nil {
		return x.CommentsCount
	}
	return nil
}

type RouterDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*RouterDetailsResponse_Error
	//	*RouterDetailsResponse_CorrectRouterDetailsResponse
	Response isRouterDetailsResponse_Response `protobuf_oneof:"response"`
}

func (x *RouterDetailsResponse) Reset() {
	*x = RouterDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterDetailsResponse) ProtoMessage() {}

func (x *RouterDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterDetailsResponse.ProtoReflect.Descriptor instead.
func (*RouterDetailsResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{11}
}

func (m *RouterDetailsResponse) GetResponse() isRouterDetailsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RouterDetailsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*RouterDetailsResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *RouterDetailsResponse) GetCorrectRouterDetailsResponse() *CorrectRouterDetailsResponse {
	if x, ok := x.GetResponse().(*RouterDetailsResponse_CorrectRouterDetailsResponse); ok {
		return x.CorrectRouterDetailsResponse
	}
	return nil
}

type isRouterDetailsResponse_Response interface {
	isRouterDetailsResponse_Response()
}

type RouterDetailsResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type RouterDetailsResponse_CorrectRouterDetailsResponse struct {
	CorrectRouterDetailsResponse *CorrectRouterDetailsResponse `protobuf:"bytes,2,opt,name=correctRouterDetailsResponse,proto3,oneof"`
}

func (*RouterDetailsResponse_Error) isRouterDetailsResponse_Response() {}

func (*RouterDetailsResponse_CorrectRouterDetailsResponse) isRouterDetailsResponse_Response() {}

type ParticipantsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       int64                `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Participant *StageParticipant    `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	Decision    *ParticipantDecision `protobuf:"bytes,3,opt,name=decision,proto3" json:"decision,omitempty"`
	UserSsoId   uint32               `protobuf:"varint,4,opt,name=user_sso_id,json=userSsoId,proto3" json:"user_sso_id,omitempty"`
}

func (x *ParticipantsData) Reset() {
	*x = ParticipantsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsData) ProtoMessage() {}

func (x *ParticipantsData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsData.ProtoReflect.Descriptor instead.
func (*ParticipantsData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{12}
}

func (x *ParticipantsData) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ParticipantsData) GetParticipant() *StageParticipant {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ParticipantsData) GetDecision() *ParticipantDecision {
	if x != nil {
		return x.Decision
	}
	return nil
}

func (x *ParticipantsData) GetUserSsoId() uint32 {
	if x != nil {
		return x.UserSsoId
	}
	return 0
}

type StageParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponsibleId []uint32 `protobuf:"varint,4,rep,packed,name=responsible_id,json=responsibleId,proto3" json:"responsible_id,omitempty"`
	Id            uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CardCode      string   `protobuf:"bytes,5,opt,name=card_code,json=cardCode,proto3" json:"card_code,omitempty"`
	Code          string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name          string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StageParticipant) Reset() {
	*x = StageParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageParticipant) ProtoMessage() {}

func (x *StageParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageParticipant.ProtoReflect.Descriptor instead.
func (*StageParticipant) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{13}
}

func (x *StageParticipant) GetResponsibleId() []uint32 {
	if x != nil {
		return x.ResponsibleId
	}
	return nil
}

func (x *StageParticipant) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StageParticipant) GetCardCode() string {
	if x != nil {
		return x.CardCode
	}
	return ""
}

func (x *StageParticipant) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StageParticipant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ParticipantDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date    string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Result  string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	ByEds   bool   `protobuf:"varint,4,opt,name=by_eds,json=byEds,proto3" json:"by_eds,omitempty"`
	CmsId   int32  `protobuf:"varint,5,opt,name=cms_id,json=cmsId,proto3" json:"cms_id,omitempty"`
	Success bool   `protobuf:"varint,6,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ParticipantDecision) Reset() {
	*x = ParticipantDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantDecision) ProtoMessage() {}

func (x *ParticipantDecision) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantDecision.ProtoReflect.Descriptor instead.
func (*ParticipantDecision) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{14}
}

func (x *ParticipantDecision) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ParticipantDecision) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ParticipantDecision) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ParticipantDecision) GetByEds() bool {
	if x != nil {
		return x.ByEds
	}
	return false
}

func (x *ParticipantDecision) GetCmsId() int32 {
	if x != nil {
		return x.CmsId
	}
	return 0
}

func (x *ParticipantDecision) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CmsIdArrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	RouteId []int32  `protobuf:"varint,2,rep,packed,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *CmsIdArrRequest) Reset() {
	*x = CmsIdArrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmsIdArrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmsIdArrRequest) ProtoMessage() {}

func (x *CmsIdArrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmsIdArrRequest.ProtoReflect.Descriptor instead.
func (*CmsIdArrRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{15}
}

func (x *CmsIdArrRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CmsIdArrRequest) GetRouteId() []int32 {
	if x != nil {
		return x.RouteId
	}
	return nil
}

type CmsIdArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdS []int32 `protobuf:"varint,1,rep,packed,name=id_s,json=idS,proto3" json:"id_s,omitempty"`
}

func (x *CmsIdArr) Reset() {
	*x = CmsIdArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmsIdArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmsIdArr) ProtoMessage() {}

func (x *CmsIdArr) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmsIdArr.ProtoReflect.Descriptor instead.
func (*CmsIdArr) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{16}
}

func (x *CmsIdArr) GetIdS() []int32 {
	if x != nil {
		return x.IdS
	}
	return nil
}

type ITC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ITC) Reset() {
	*x = ITC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ITC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ITC) ProtoMessage() {}

func (x *ITC) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ITC.ProtoReflect.Descriptor instead.
func (*ITC) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{17}
}

func (x *ITC) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ITC) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ITC) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ICN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ICN) Reset() {
	*x = ICN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICN) ProtoMessage() {}

func (x *ICN) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICN.ProtoReflect.Descriptor instead.
func (*ICN) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{18}
}

func (x *ICN) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ICN) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ICN) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ICNM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code   string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	NameRu string `protobuf:"bytes,3,opt,name=name_ru,json=nameRu,proto3" json:"name_ru,omitempty"`
	NameKz string `protobuf:"bytes,4,opt,name=name_kz,json=nameKz,proto3" json:"name_kz,omitempty"`
	NameEn string `protobuf:"bytes,5,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
}

func (x *ICNM) Reset() {
	*x = ICNM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICNM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICNM) ProtoMessage() {}

func (x *ICNM) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICNM.ProtoReflect.Descriptor instead.
func (*ICNM) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{19}
}

func (x *ICNM) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ICNM) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ICNM) GetNameRu() string {
	if x != nil {
		return x.NameRu
	}
	return ""
}

func (x *ICNM) GetNameKz() string {
	if x != nil {
		return x.NameKz
	}
	return ""
}

func (x *ICNM) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

type ListSettingsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index           int64               `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ActionId        int64               `protobuf:"varint,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	Deadline        string              `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	InSeries        bool                `protobuf:"varint,4,opt,name=in_series,json=inSeries,proto3" json:"in_series,omitempty"`
	CanAddPart      bool                `protobuf:"varint,5,opt,name=can_add_part,json=canAddPart,proto3" json:"can_add_part,omitempty"`
	CanDelegate     bool                `protobuf:"varint,6,opt,name=can_delegate,json=canDelegate,proto3" json:"can_delegate,omitempty"`
	WaitDelegate    bool                `protobuf:"varint,7,opt,name=wait_delegate,json=waitDelegate,proto3" json:"wait_delegate,omitempty"`
	CanDecline      bool                `protobuf:"varint,8,opt,name=can_decline,json=canDecline,proto3" json:"can_decline,omitempty"`
	NeedConfirm     bool                `protobuf:"varint,9,opt,name=need_confirm,json=needConfirm,proto3" json:"need_confirm,omitempty"`
	ByEds           bool                `protobuf:"varint,15,opt,name=by_eds,json=byEds,proto3" json:"by_eds,omitempty"`
	ByCompanyEds    bool                `protobuf:"varint,17,opt,name=by_company_eds,json=byCompanyEds,proto3" json:"by_company_eds,omitempty"`
	FilesAccess     int32               `protobuf:"varint,16,opt,name=files_access,json=filesAccess,proto3" json:"files_access,omitempty"`
	TermInDays      int32               `protobuf:"varint,10,opt,name=term_in_days,json=termInDays,proto3" json:"term_in_days,omitempty"`
	TermInHours     int32               `protobuf:"varint,11,opt,name=term_in_hours,json=termInHours,proto3" json:"term_in_hours,omitempty"`
	TermInMinutes   int32               `protobuf:"varint,12,opt,name=term_in_minutes,json=termInMinutes,proto3" json:"term_in_minutes,omitempty"`
	EmpSettingsList []*ParticipantsData `protobuf:"bytes,13,rep,name=emp_settings_list,json=empSettingsList,proto3" json:"emp_settings_list,omitempty"`
	Id              uint32              `protobuf:"varint,14,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListSettingsData) Reset() {
	*x = ListSettingsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSettingsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSettingsData) ProtoMessage() {}

func (x *ListSettingsData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSettingsData.ProtoReflect.Descriptor instead.
func (*ListSettingsData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{20}
}

func (x *ListSettingsData) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ListSettingsData) GetActionId() int64 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *ListSettingsData) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *ListSettingsData) GetInSeries() bool {
	if x != nil {
		return x.InSeries
	}
	return false
}

func (x *ListSettingsData) GetCanAddPart() bool {
	if x != nil {
		return x.CanAddPart
	}
	return false
}

func (x *ListSettingsData) GetCanDelegate() bool {
	if x != nil {
		return x.CanDelegate
	}
	return false
}

func (x *ListSettingsData) GetWaitDelegate() bool {
	if x != nil {
		return x.WaitDelegate
	}
	return false
}

func (x *ListSettingsData) GetCanDecline() bool {
	if x != nil {
		return x.CanDecline
	}
	return false
}

func (x *ListSettingsData) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

func (x *ListSettingsData) GetByEds() bool {
	if x != nil {
		return x.ByEds
	}
	return false
}

func (x *ListSettingsData) GetByCompanyEds() bool {
	if x != nil {
		return x.ByCompanyEds
	}
	return false
}

func (x *ListSettingsData) GetFilesAccess() int32 {
	if x != nil {
		return x.FilesAccess
	}
	return 0
}

func (x *ListSettingsData) GetTermInDays() int32 {
	if x != nil {
		return x.TermInDays
	}
	return 0
}

func (x *ListSettingsData) GetTermInHours() int32 {
	if x != nil {
		return x.TermInHours
	}
	return 0
}

func (x *ListSettingsData) GetTermInMinutes() int32 {
	if x != nil {
		return x.TermInMinutes
	}
	return 0
}

func (x *ListSettingsData) GetEmpSettingsList() []*ParticipantsData {
	if x != nil {
		return x.EmpSettingsList
	}
	return nil
}

func (x *ListSettingsData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{21}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type RouteCURequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyDecision   bool                `protobuf:"varint,1,opt,name=notify_decision,json=notifyDecision,proto3" json:"notify_decision,omitempty"`
	StartProcess     bool                `protobuf:"varint,2,opt,name=start_process,json=startProcess,proto3" json:"start_process,omitempty"`
	ListSettingsData []*ListSettingsData `protobuf:"bytes,3,rep,name=list_settings_data,json=listSettingsData,proto3" json:"list_settings_data,omitempty"`
	RouteId          uint32              `protobuf:"varint,4,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	IsPattern        bool                `protobuf:"varint,5,opt,name=is_pattern,json=isPattern,proto3" json:"is_pattern,omitempty"`
	ByPattern        bool                `protobuf:"varint,6,opt,name=by_pattern,json=byPattern,proto3" json:"by_pattern,omitempty"`
	PatternId        uint32              `protobuf:"varint,7,opt,name=pattern_id,json=patternId,proto3" json:"pattern_id,omitempty"`
	CanModify        bool                `protobuf:"varint,8,opt,name=can_modify,json=canModify,proto3" json:"can_modify,omitempty"`
	Restart          bool                `protobuf:"varint,9,opt,name=restart,proto3" json:"restart,omitempty"`
	InvitationData   *InvitationData     `protobuf:"bytes,10,opt,name=invitation_data,json=invitationData,proto3" json:"invitation_data,omitempty"`
}

func (x *RouteCURequest) Reset() {
	*x = RouteCURequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteCURequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteCURequest) ProtoMessage() {}

func (x *RouteCURequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteCURequest.ProtoReflect.Descriptor instead.
func (*RouteCURequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{22}
}

func (x *RouteCURequest) GetNotifyDecision() bool {
	if x != nil {
		return x.NotifyDecision
	}
	return false
}

func (x *RouteCURequest) GetStartProcess() bool {
	if x != nil {
		return x.StartProcess
	}
	return false
}

func (x *RouteCURequest) GetListSettingsData() []*ListSettingsData {
	if x != nil {
		return x.ListSettingsData
	}
	return nil
}

func (x *RouteCURequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *RouteCURequest) GetIsPattern() bool {
	if x != nil {
		return x.IsPattern
	}
	return false
}

func (x *RouteCURequest) GetByPattern() bool {
	if x != nil {
		return x.ByPattern
	}
	return false
}

func (x *RouteCURequest) GetPatternId() uint32 {
	if x != nil {
		return x.PatternId
	}
	return 0
}

func (x *RouteCURequest) GetCanModify() bool {
	if x != nil {
		return x.CanModify
	}
	return false
}

func (x *RouteCURequest) GetRestart() bool {
	if x != nil {
		return x.Restart
	}
	return false
}

func (x *RouteCURequest) GetInvitationData() *InvitationData {
	if x != nil {
		return x.InvitationData
	}
	return nil
}

type InvitationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FioAndCompanyName string `protobuf:"bytes,1,opt,name=fio_and_company_name,json=fioAndCompanyName,proto3" json:"fio_and_company_name,omitempty"`
	DocumentName      string `protobuf:"bytes,2,opt,name=document_name,json=documentName,proto3" json:"document_name,omitempty"`
}

func (x *InvitationData) Reset() {
	*x = InvitationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvitationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvitationData) ProtoMessage() {}

func (x *InvitationData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvitationData.ProtoReflect.Descriptor instead.
func (*InvitationData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{23}
}

func (x *InvitationData) GetFioAndCompanyName() string {
	if x != nil {
		return x.FioAndCompanyName
	}
	return ""
}

func (x *InvitationData) GetDocumentName() string {
	if x != nil {
		return x.DocumentName
	}
	return ""
}

type ListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListSettingsId  int64               `protobuf:"varint,1,opt,name=list_settings_id,json=listSettingsId,proto3" json:"list_settings_id,omitempty"`
	Deadline        string              `protobuf:"bytes,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	InSeries        bool                `protobuf:"varint,3,opt,name=in_series,json=inSeries,proto3" json:"in_series,omitempty"`
	EmpSettingsList []*ParticipantsData `protobuf:"bytes,4,rep,name=emp_settings_list,json=empSettingsList,proto3" json:"emp_settings_list,omitempty"`
}

func (x *ListData) Reset() {
	*x = ListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListData) ProtoMessage() {}

func (x *ListData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListData.ProtoReflect.Descriptor instead.
func (*ListData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{24}
}

func (x *ListData) GetListSettingsId() int64 {
	if x != nil {
		return x.ListSettingsId
	}
	return 0
}

func (x *ListData) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *ListData) GetInSeries() bool {
	if x != nil {
		return x.InSeries
	}
	return false
}

func (x *ListData) GetEmpSettingsList() []*ParticipantsData {
	if x != nil {
		return x.EmpSettingsList
	}
	return nil
}

type StartProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId uint64 `protobuf:"varint,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Restart  bool   `protobuf:"varint,2,opt,name=restart,proto3" json:"restart,omitempty"`
}

func (x *StartProcessRequest) Reset() {
	*x = StartProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProcessRequest) ProtoMessage() {}

func (x *StartProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProcessRequest.ProtoReflect.Descriptor instead.
func (*StartProcessRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{25}
}

func (x *StartProcessRequest) GetRouterId() uint64 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *StartProcessRequest) GetRestart() bool {
	if x != nil {
		return x.Restart
	}
	return false
}

type CorrectStartProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *ICNM                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RouteId            uint32                `protobuf:"varint,4,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	ListDeadline       string                `protobuf:"bytes,5,opt,name=list_deadline,json=listDeadline,proto3" json:"list_deadline,omitempty"`
	CurrentParticipant []*CurrentParticipant `protobuf:"bytes,3,rep,name=current_participant,json=currentParticipant,proto3" json:"current_participant,omitempty"`
	Action             *ICNM                 `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *CorrectStartProcessResponse) Reset() {
	*x = CorrectStartProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectStartProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectStartProcessResponse) ProtoMessage() {}

func (x *CorrectStartProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectStartProcessResponse.ProtoReflect.Descriptor instead.
func (*CorrectStartProcessResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{26}
}

func (x *CorrectStartProcessResponse) GetStatus() *ICNM {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CorrectStartProcessResponse) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *CorrectStartProcessResponse) GetListDeadline() string {
	if x != nil {
		return x.ListDeadline
	}
	return ""
}

func (x *CorrectStartProcessResponse) GetCurrentParticipant() []*CurrentParticipant {
	if x != nil {
		return x.CurrentParticipant
	}
	return nil
}

func (x *CorrectStartProcessResponse) GetAction() *ICNM {
	if x != nil {
		return x.Action
	}
	return nil
}

type StartProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*StartProcessResponse_Error
	//	*StartProcessResponse_Data
	Response isStartProcessResponse_Response `protobuf_oneof:"response"`
}

func (x *StartProcessResponse) Reset() {
	*x = StartProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProcessResponse) ProtoMessage() {}

func (x *StartProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProcessResponse.ProtoReflect.Descriptor instead.
func (*StartProcessResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{27}
}

func (m *StartProcessResponse) GetResponse() isStartProcessResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StartProcessResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*StartProcessResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StartProcessResponse) GetData() *CorrectStartProcessResponse {
	if x, ok := x.GetResponse().(*StartProcessResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isStartProcessResponse_Response interface {
	isStartProcessResponse_Response()
}

type StartProcessResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type StartProcessResponse_Data struct {
	Data *CorrectStartProcessResponse `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*StartProcessResponse_Error) isStartProcessResponse_Response() {}

func (*StartProcessResponse_Data) isStartProcessResponse_Response() {}

type ActionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ActionResp) Reset() {
	*x = ActionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResp) ProtoMessage() {}

func (x *ActionResp) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResp.ProtoReflect.Descriptor instead.
func (*ActionResp) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{28}
}

func (x *ActionResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActionResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AdjudicationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         *Context          `protobuf:"bytes,8,opt,name=context,proto3" json:"context,omitempty"`
	FolderData      *FolderData       `protobuf:"bytes,9,opt,name=folder_data,json=folderData,proto3" json:"folder_data,omitempty"`
	ParticipantData *ParticipantsData `protobuf:"bytes,1,opt,name=participant_data,json=participantData,proto3" json:"participant_data,omitempty"`
	AllParticipants []*ICN            `protobuf:"bytes,10,rep,name=all_participants,json=allParticipants,proto3" json:"all_participants,omitempty"`
	RouteId         int32             `protobuf:"varint,2,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Comment         string            `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Success         bool              `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	ByEds           bool              `protobuf:"varint,11,opt,name=by_eds,json=byEds,proto3" json:"by_eds,omitempty"`
	NeedAlteration  bool              `protobuf:"varint,6,opt,name=need_alteration,json=needAlteration,proto3" json:"need_alteration,omitempty"`
	StopWithDecline bool              `protobuf:"varint,7,opt,name=stop_with_decline,json=stopWithDecline,proto3" json:"stop_with_decline,omitempty"`
}

func (x *AdjudicationData) Reset() {
	*x = AdjudicationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjudicationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjudicationData) ProtoMessage() {}

func (x *AdjudicationData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjudicationData.ProtoReflect.Descriptor instead.
func (*AdjudicationData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{29}
}

func (x *AdjudicationData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AdjudicationData) GetFolderData() *FolderData {
	if x != nil {
		return x.FolderData
	}
	return nil
}

func (x *AdjudicationData) GetParticipantData() *ParticipantsData {
	if x != nil {
		return x.ParticipantData
	}
	return nil
}

func (x *AdjudicationData) GetAllParticipants() []*ICN {
	if x != nil {
		return x.AllParticipants
	}
	return nil
}

func (x *AdjudicationData) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *AdjudicationData) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AdjudicationData) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AdjudicationData) GetByEds() bool {
	if x != nil {
		return x.ByEds
	}
	return false
}

func (x *AdjudicationData) GetNeedAlteration() bool {
	if x != nil {
		return x.NeedAlteration
	}
	return false
}

func (x *AdjudicationData) GetStopWithDecline() bool {
	if x != nil {
		return x.StopWithDecline
	}
	return false
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes    []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	IsLast   bool   `protobuf:"varint,2,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{30}
}

func (x *Chunk) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Chunk) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *Chunk) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ContentLength string `protobuf:"bytes,3,opt,name=contentLength,proto3" json:"contentLength,omitempty"`
	FileExst      string `protobuf:"bytes,4,opt,name=fileExst,proto3" json:"fileExst,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{31}
}

func (x *FileInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FileInfo) GetContentLength() string {
	if x != nil {
		return x.ContentLength
	}
	return ""
}

func (x *FileInfo) GetFileExst() string {
	if x != nil {
		return x.FileExst
	}
	return ""
}

type FolderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId   int32  `protobuf:"varint,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	FolderName string `protobuf:"bytes,2,opt,name=folder_name,json=folderName,proto3" json:"folder_name,omitempty"`
}

func (x *FolderData) Reset() {
	*x = FolderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderData) ProtoMessage() {}

func (x *FolderData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderData.ProtoReflect.Descriptor instead.
func (*FolderData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{32}
}

func (x *FolderData) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *FolderData) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

type UploadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context    *Context    `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	FolderData *FolderData `protobuf:"bytes,2,opt,name=folder_data,json=folderData,proto3" json:"folder_data,omitempty"`
}

func (x *UploadData) Reset() {
	*x = UploadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadData) ProtoMessage() {}

func (x *UploadData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadData.ProtoReflect.Descriptor instead.
func (*UploadData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{33}
}

func (x *UploadData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UploadData) GetFolderData() *FolderData {
	if x != nil {
		return x.FolderData
	}
	return nil
}

type UploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*UploadRequest_Data
	//	*UploadRequest_Chunk
	Request isUploadRequest_Request `protobuf_oneof:"request"`
}

func (x *UploadRequest) Reset() {
	*x = UploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRequest) ProtoMessage() {}

func (x *UploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRequest.ProtoReflect.Descriptor instead.
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{34}
}

func (m *UploadRequest) GetRequest() isUploadRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *UploadRequest) GetData() *UploadData {
	if x, ok := x.GetRequest().(*UploadRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (x *UploadRequest) GetChunk() *Chunk {
	if x, ok := x.GetRequest().(*UploadRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isUploadRequest_Request interface {
	isUploadRequest_Request()
}

type UploadRequest_Data struct {
	Data *UploadData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type UploadRequest_Chunk struct {
	Chunk *Chunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*UploadRequest_Data) isUploadRequest_Request() {}

func (*UploadRequest_Chunk) isUploadRequest_Request() {}

type DownloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Id      int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DownloadRequest) Reset() {
	*x = DownloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadRequest) ProtoMessage() {}

func (x *DownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadRequest.ProtoReflect.Descriptor instead.
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{35}
}

func (x *DownloadRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DownloadRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetPDFRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Id      int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Number  string   `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *GetPDFRequest) Reset() {
	*x = GetPDFRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPDFRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPDFRequest) ProtoMessage() {}

func (x *GetPDFRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPDFRequest.ProtoReflect.Descriptor instead.
func (*GetPDFRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{36}
}

func (x *GetPDFRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *GetPDFRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPDFRequest) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type UploadedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files    []*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	FolderId uint32      `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *UploadedFiles) Reset() {
	*x = UploadedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadedFiles) ProtoMessage() {}

func (x *UploadedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadedFiles.ProtoReflect.Descriptor instead.
func (*UploadedFiles) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{37}
}

func (x *UploadedFiles) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *UploadedFiles) GetFolderId() uint32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

type GeneratedPdfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files              []*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	FolderId           uint32      `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	IsPdfCard          bool        `protobuf:"varint,3,opt,name=is_pdf_card,json=isPdfCard,proto3" json:"is_pdf_card,omitempty"`
	IsPdfAgreementList bool        `protobuf:"varint,4,opt,name=is_pdf_agreement_list,json=isPdfAgreementList,proto3" json:"is_pdf_agreement_list,omitempty"`
}

func (x *GeneratedPdfData) Reset() {
	*x = GeneratedPdfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratedPdfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratedPdfData) ProtoMessage() {}

func (x *GeneratedPdfData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratedPdfData.ProtoReflect.Descriptor instead.
func (*GeneratedPdfData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{38}
}

func (x *GeneratedPdfData) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *GeneratedPdfData) GetFolderId() uint32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *GeneratedPdfData) GetIsPdfCard() bool {
	if x != nil {
		return x.IsPdfCard
	}
	return false
}

func (x *GeneratedPdfData) GetIsPdfAgreementList() bool {
	if x != nil {
		return x.IsPdfAgreementList
	}
	return false
}

type UploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*UploadResponse_Error
	//	*UploadResponse_Data
	Response isUploadResponse_Response `protobuf_oneof:"response"`
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{39}
}

func (m *UploadResponse) GetResponse() isUploadResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *UploadResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*UploadResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *UploadResponse) GetData() *UploadedFiles {
	if x, ok := x.GetResponse().(*UploadResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isUploadResponse_Response interface {
	isUploadResponse_Response()
}

type UploadResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type UploadResponse_Data struct {
	Data *UploadedFiles `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*UploadResponse_Error) isUploadResponse_Response() {}

func (*UploadResponse_Data) isUploadResponse_Response() {}

type DelegationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context           *Context    `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	FolderData        *FolderData `protobuf:"bytes,7,opt,name=folder_data,json=folderData,proto3" json:"folder_data,omitempty"`
	RouteId           int32       `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	SsoEmpId          int32       `protobuf:"varint,2,opt,name=sso_emp_id,json=ssoEmpId,proto3" json:"sso_emp_id,omitempty"`
	Comment           string      `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	OtherParticipants []*ICN      `protobuf:"bytes,8,rep,name=other_participants,json=otherParticipants,proto3" json:"other_participants,omitempty"`
	Participants      []int32     `protobuf:"varint,4,rep,packed,name=participants,proto3" json:"participants,omitempty"`
	FullDelegation    bool        `protobuf:"varint,5,opt,name=full_delegation,json=fullDelegation,proto3" json:"full_delegation,omitempty"`
}

func (x *DelegationData) Reset() {
	*x = DelegationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationData) ProtoMessage() {}

func (x *DelegationData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationData.ProtoReflect.Descriptor instead.
func (*DelegationData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{40}
}

func (x *DelegationData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DelegationData) GetFolderData() *FolderData {
	if x != nil {
		return x.FolderData
	}
	return nil
}

func (x *DelegationData) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *DelegationData) GetSsoEmpId() int32 {
	if x != nil {
		return x.SsoEmpId
	}
	return 0
}

func (x *DelegationData) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *DelegationData) GetOtherParticipants() []*ICN {
	if x != nil {
		return x.OtherParticipants
	}
	return nil
}

func (x *DelegationData) GetParticipants() []int32 {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *DelegationData) GetFullDelegation() bool {
	if x != nil {
		return x.FullDelegation
	}
	return false
}

type DelegationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*DelegationRequest_Data
	//	*DelegationRequest_Chunk
	Request isDelegationRequest_Request `protobuf_oneof:"request"`
}

func (x *DelegationRequest) Reset() {
	*x = DelegationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationRequest) ProtoMessage() {}

func (x *DelegationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationRequest.ProtoReflect.Descriptor instead.
func (*DelegationRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{41}
}

func (m *DelegationRequest) GetRequest() isDelegationRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *DelegationRequest) GetData() *DelegationData {
	if x, ok := x.GetRequest().(*DelegationRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (x *DelegationRequest) GetChunk() *Chunk {
	if x, ok := x.GetRequest().(*DelegationRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isDelegationRequest_Request interface {
	isDelegationRequest_Request()
}

type DelegationRequest_Data struct {
	Data *DelegationData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type DelegationRequest_Chunk struct {
	Chunk *Chunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*DelegationRequest_Data) isDelegationRequest_Request() {}

func (*DelegationRequest_Chunk) isDelegationRequest_Request() {}

type DelegateResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action           *ICNM             `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	FilesAccess      int32             `protobuf:"varint,2,opt,name=files_access,json=filesAccess,proto3" json:"files_access,omitempty"`
	NotificationData *NotificationData `protobuf:"bytes,3,opt,name=notification_data,json=notificationData,proto3" json:"notification_data,omitempty"`
}

func (x *DelegateResponseData) Reset() {
	*x = DelegateResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateResponseData) ProtoMessage() {}

func (x *DelegateResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateResponseData.ProtoReflect.Descriptor instead.
func (*DelegateResponseData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{42}
}

func (x *DelegateResponseData) GetAction() *ICNM {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *DelegateResponseData) GetFilesAccess() int32 {
	if x != nil {
		return x.FilesAccess
	}
	return 0
}

func (x *DelegateResponseData) GetNotificationData() *NotificationData {
	if x != nil {
		return x.NotificationData
	}
	return nil
}

type DelegateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DelegateResponse_Error
	//	*DelegateResponse_Data
	Response isDelegateResponse_Response `protobuf_oneof:"response"`
}

func (x *DelegateResponse) Reset() {
	*x = DelegateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateResponse) ProtoMessage() {}

func (x *DelegateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateResponse.ProtoReflect.Descriptor instead.
func (*DelegateResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{43}
}

func (m *DelegateResponse) GetResponse() isDelegateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DelegateResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*DelegateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *DelegateResponse) GetData() *DelegateResponseData {
	if x, ok := x.GetResponse().(*DelegateResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isDelegateResponse_Response interface {
	isDelegateResponse_Response()
}

type DelegateResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type DelegateResponse_Data struct {
	Data *DelegateResponseData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*DelegateResponse_Error) isDelegateResponse_Response() {}

func (*DelegateResponse_Data) isDelegateResponse_Response() {}

type AdjudicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*AdjudicationRequest_Data
	//	*AdjudicationRequest_Chunk
	Request isAdjudicationRequest_Request `protobuf_oneof:"request"`
}

func (x *AdjudicationRequest) Reset() {
	*x = AdjudicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjudicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjudicationRequest) ProtoMessage() {}

func (x *AdjudicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjudicationRequest.ProtoReflect.Descriptor instead.
func (*AdjudicationRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{44}
}

func (m *AdjudicationRequest) GetRequest() isAdjudicationRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *AdjudicationRequest) GetData() *AdjudicationData {
	if x, ok := x.GetRequest().(*AdjudicationRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (x *AdjudicationRequest) GetChunk() *Chunk {
	if x, ok := x.GetRequest().(*AdjudicationRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isAdjudicationRequest_Request interface {
	isAdjudicationRequest_Request()
}

type AdjudicationRequest_Data struct {
	Data *AdjudicationData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type AdjudicationRequest_Chunk struct {
	Chunk *Chunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*AdjudicationRequest_Data) isAdjudicationRequest_Request() {}

func (*AdjudicationRequest_Chunk) isAdjudicationRequest_Request() {}

type CorrectAdjudicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *ICNM                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Action             *ICNM                 `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	StageId            int32                 `protobuf:"varint,1,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	CmsId              int32                 `protobuf:"varint,2,opt,name=cms_id,json=cmsId,proto3" json:"cms_id,omitempty"`
	ListDeadline       string                `protobuf:"bytes,4,opt,name=list_deadline,json=listDeadline,proto3" json:"list_deadline,omitempty"`
	EndDate            string                `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	CurrentParticipant []*CurrentParticipant `protobuf:"bytes,6,rep,name=current_participant,json=currentParticipant,proto3" json:"current_participant,omitempty"`
}

func (x *CorrectAdjudicationResponse) Reset() {
	*x = CorrectAdjudicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectAdjudicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectAdjudicationResponse) ProtoMessage() {}

func (x *CorrectAdjudicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectAdjudicationResponse.ProtoReflect.Descriptor instead.
func (*CorrectAdjudicationResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{45}
}

func (x *CorrectAdjudicationResponse) GetStatus() *ICNM {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CorrectAdjudicationResponse) GetAction() *ICNM {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *CorrectAdjudicationResponse) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *CorrectAdjudicationResponse) GetCmsId() int32 {
	if x != nil {
		return x.CmsId
	}
	return 0
}

func (x *CorrectAdjudicationResponse) GetListDeadline() string {
	if x != nil {
		return x.ListDeadline
	}
	return ""
}

func (x *CorrectAdjudicationResponse) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *CorrectAdjudicationResponse) GetCurrentParticipant() []*CurrentParticipant {
	if x != nil {
		return x.CurrentParticipant
	}
	return nil
}

type AdjudicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AdjudicationResponse_Error
	//	*AdjudicationResponse_CorrectAdjudicationResponse
	Response isAdjudicationResponse_Response `protobuf_oneof:"response"`
}

func (x *AdjudicationResponse) Reset() {
	*x = AdjudicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjudicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjudicationResponse) ProtoMessage() {}

func (x *AdjudicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjudicationResponse.ProtoReflect.Descriptor instead.
func (*AdjudicationResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{46}
}

func (m *AdjudicationResponse) GetResponse() isAdjudicationResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AdjudicationResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*AdjudicationResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *AdjudicationResponse) GetCorrectAdjudicationResponse() *CorrectAdjudicationResponse {
	if x, ok := x.GetResponse().(*AdjudicationResponse_CorrectAdjudicationResponse); ok {
		return x.CorrectAdjudicationResponse
	}
	return nil
}

type isAdjudicationResponse_Response interface {
	isAdjudicationResponse_Response()
}

type AdjudicationResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type AdjudicationResponse_CorrectAdjudicationResponse struct {
	CorrectAdjudicationResponse *CorrectAdjudicationResponse `protobuf:"bytes,2,opt,name=correctAdjudicationResponse,proto3,oneof"`
}

func (*AdjudicationResponse_Error) isAdjudicationResponse_Response() {}

func (*AdjudicationResponse_CorrectAdjudicationResponse) isAdjudicationResponse_Response() {}

type ExpandParticipantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId      uint32                  `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Participants []*ParticipantForExpand `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *ExpandParticipantsRequest) Reset() {
	*x = ExpandParticipantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandParticipantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandParticipantsRequest) ProtoMessage() {}

func (x *ExpandParticipantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandParticipantsRequest.ProtoReflect.Descriptor instead.
func (*ExpandParticipantsRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{47}
}

func (x *ExpandParticipantsRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *ExpandParticipantsRequest) GetParticipants() []*ParticipantForExpand {
	if x != nil {
		return x.Participants
	}
	return nil
}

type ParticipantForExpand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeSsoId uint32 `protobuf:"varint,1,opt,name=employee_sso_id,json=employeeSsoId,proto3" json:"employee_sso_id,omitempty"`
	Id            uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Code          string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ParticipantForExpand) Reset() {
	*x = ParticipantForExpand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantForExpand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantForExpand) ProtoMessage() {}

func (x *ParticipantForExpand) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantForExpand.ProtoReflect.Descriptor instead.
func (*ParticipantForExpand) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{48}
}

func (x *ParticipantForExpand) GetEmployeeSsoId() uint32 {
	if x != nil {
		return x.EmployeeSsoId
	}
	return 0
}

func (x *ParticipantForExpand) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParticipantForExpand) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{49}
}

func (x *Status) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Status) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Status) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StopProcessResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *ICNM `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StopProcessResponseData) Reset() {
	*x = StopProcessResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProcessResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProcessResponseData) ProtoMessage() {}

func (x *StopProcessResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProcessResponseData.ProtoReflect.Descriptor instead.
func (*StopProcessResponseData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{50}
}

func (x *StopProcessResponseData) GetStatus() *ICNM {
	if x != nil {
		return x.Status
	}
	return nil
}

type StopProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*StopProcessResponse_Error
	//	*StopProcessResponse_Data
	Response isStopProcessResponse_Response `protobuf_oneof:"response"`
}

func (x *StopProcessResponse) Reset() {
	*x = StopProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProcessResponse) ProtoMessage() {}

func (x *StopProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProcessResponse.ProtoReflect.Descriptor instead.
func (*StopProcessResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{51}
}

func (m *StopProcessResponse) GetResponse() isStopProcessResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StopProcessResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*StopProcessResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StopProcessResponse) GetData() *StopProcessResponseData {
	if x, ok := x.GetResponse().(*StopProcessResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isStopProcessResponse_Response interface {
	isStopProcessResponse_Response()
}

type StopProcessResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type StopProcessResponse_Data struct {
	Data *StopProcessResponseData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*StopProcessResponse_Error) isStopProcessResponse_Response() {}

func (*StopProcessResponse_Data) isStopProcessResponse_Response() {}

type NotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *NotificationData) Reset() {
	*x = NotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationData) ProtoMessage() {}

func (x *NotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationData.ProtoReflect.Descriptor instead.
func (*NotificationData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{52}
}

func (x *NotificationData) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *NotificationData) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CurrentParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationData *NotificationData `protobuf:"bytes,3,opt,name=notification_data,json=notificationData,proto3" json:"notification_data,omitempty"`
	Employees        []*ICN            `protobuf:"bytes,2,rep,name=employees,proto3" json:"employees,omitempty"`
	Code             string            `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // add - добавить; update - обновить имеющегося; del - удалить
	FilesAccess      int32             `protobuf:"varint,4,opt,name=files_access,json=filesAccess,proto3" json:"files_access,omitempty"`
}

func (x *CurrentParticipant) Reset() {
	*x = CurrentParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentParticipant) ProtoMessage() {}

func (x *CurrentParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentParticipant.ProtoReflect.Descriptor instead.
func (*CurrentParticipant) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{53}
}

func (x *CurrentParticipant) GetNotificationData() *NotificationData {
	if x != nil {
		return x.NotificationData
	}
	return nil
}

func (x *CurrentParticipant) GetEmployees() []*ICN {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *CurrentParticipant) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CurrentParticipant) GetFilesAccess() int32 {
	if x != nil {
		return x.FilesAccess
	}
	return 0
}

type AlertsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	RouteId uint32   `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	IsOwner bool     `protobuf:"varint,2,opt,name=is_owner,json=isOwner,proto3" json:"is_owner,omitempty"`
}

func (x *AlertsRequest) Reset() {
	*x = AlertsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertsRequest) ProtoMessage() {}

func (x *AlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertsRequest.ProtoReflect.Descriptor instead.
func (*AlertsRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{54}
}

func (x *AlertsRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AlertsRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *AlertsRequest) GetIsOwner() bool {
	if x != nil {
		return x.IsOwner
	}
	return false
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files       []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	ActionType  *ICN    `protobuf:"bytes,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	Author      *ICN    `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	TypeComment string  `protobuf:"bytes,4,opt,name=type_comment,json=typeComment,proto3" json:"type_comment,omitempty"`
	DateComment string  `protobuf:"bytes,5,opt,name=date_comment,json=dateComment,proto3" json:"date_comment,omitempty"`
	TextComment string  `protobuf:"bytes,6,opt,name=text_comment,json=textComment,proto3" json:"text_comment,omitempty"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{55}
}

func (x *Alert) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *Alert) GetActionType() *ICN {
	if x != nil {
		return x.ActionType
	}
	return nil
}

func (x *Alert) GetAuthor() *ICN {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Alert) GetTypeComment() string {
	if x != nil {
		return x.TypeComment
	}
	return ""
}

func (x *Alert) GetDateComment() string {
	if x != nil {
		return x.DateComment
	}
	return ""
}

func (x *Alert) GetTextComment() string {
	if x != nil {
		return x.TextComment
	}
	return ""
}

type Alerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*Alert `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *Alerts) Reset() {
	*x = Alerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerts) ProtoMessage() {}

func (x *Alerts) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerts.ProtoReflect.Descriptor instead.
func (*Alerts) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{56}
}

func (x *Alerts) GetComments() []*Alert {
	if x != nil {
		return x.Comments
	}
	return nil
}

type AlertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AlertsResponse_Error
	//	*AlertsResponse_Data
	Response isAlertsResponse_Response `protobuf_oneof:"response"`
}

func (x *AlertsResponse) Reset() {
	*x = AlertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertsResponse) ProtoMessage() {}

func (x *AlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertsResponse.ProtoReflect.Descriptor instead.
func (*AlertsResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{57}
}

func (m *AlertsResponse) GetResponse() isAlertsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AlertsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*AlertsResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *AlertsResponse) GetData() *Alerts {
	if x, ok := x.GetResponse().(*AlertsResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isAlertsResponse_Response interface {
	isAlertsResponse_Response()
}

type AlertsResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type AlertsResponse_Data struct {
	Data *Alerts `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*AlertsResponse_Error) isAlertsResponse_Response() {}

func (*AlertsResponse_Data) isAlertsResponse_Response() {}

type ParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId           uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	ParticipantId     uint32 `protobuf:"varint,2,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	CurrentEmployeeId uint32 `protobuf:"varint,3,opt,name=current_employee_id,json=currentEmployeeId,proto3" json:"current_employee_id,omitempty"`
}

func (x *ParticipantRequest) Reset() {
	*x = ParticipantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantRequest) ProtoMessage() {}

func (x *ParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantRequest.ProtoReflect.Descriptor instead.
func (*ParticipantRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{58}
}

func (x *ParticipantRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *ParticipantRequest) GetParticipantId() uint32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *ParticipantRequest) GetCurrentEmployeeId() uint32 {
	if x != nil {
		return x.CurrentEmployeeId
	}
	return 0
}

type CorrectStatusListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusList []*Status `protobuf:"bytes,1,rep,name=status_list,json=statusList,proto3" json:"status_list,omitempty"`
}

func (x *CorrectStatusListResponse) Reset() {
	*x = CorrectStatusListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectStatusListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectStatusListResponse) ProtoMessage() {}

func (x *CorrectStatusListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectStatusListResponse.ProtoReflect.Descriptor instead.
func (*CorrectStatusListResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{59}
}

func (x *CorrectStatusListResponse) GetStatusList() []*Status {
	if x != nil {
		return x.StatusList
	}
	return nil
}

type StatusListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*StatusListResponse_Error
	//	*StatusListResponse_CorrectStatusListResponse
	Response isStatusListResponse_Response `protobuf_oneof:"response"`
}

func (x *StatusListResponse) Reset() {
	*x = StatusListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusListResponse) ProtoMessage() {}

func (x *StatusListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusListResponse.ProtoReflect.Descriptor instead.
func (*StatusListResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{60}
}

func (m *StatusListResponse) GetResponse() isStatusListResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StatusListResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*StatusListResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StatusListResponse) GetCorrectStatusListResponse() *CorrectStatusListResponse {
	if x, ok := x.GetResponse().(*StatusListResponse_CorrectStatusListResponse); ok {
		return x.CorrectStatusListResponse
	}
	return nil
}

type isStatusListResponse_Response interface {
	isStatusListResponse_Response()
}

type StatusListResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type StatusListResponse_CorrectStatusListResponse struct {
	CorrectStatusListResponse *CorrectStatusListResponse `protobuf:"bytes,2,opt,name=correctStatusListResponse,proto3,oneof"`
}

func (*StatusListResponse_Error) isStatusListResponse_Response() {}

func (*StatusListResponse_CorrectStatusListResponse) isStatusListResponse_Response() {}

type CorrectActionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ActionResp `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total uint32        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Slug  string        `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *CorrectActionListResponse) Reset() {
	*x = CorrectActionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectActionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectActionListResponse) ProtoMessage() {}

func (x *CorrectActionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectActionListResponse.ProtoReflect.Descriptor instead.
func (*CorrectActionListResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{61}
}

func (x *CorrectActionListResponse) GetList() []*ActionResp {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CorrectActionListResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CorrectActionListResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type ActionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ActionListResponse_Error
	//	*ActionListResponse_CorrectActionListResponse
	Response isActionListResponse_Response `protobuf_oneof:"response"`
}

func (x *ActionListResponse) Reset() {
	*x = ActionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionListResponse) ProtoMessage() {}

func (x *ActionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionListResponse.ProtoReflect.Descriptor instead.
func (*ActionListResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{62}
}

func (m *ActionListResponse) GetResponse() isActionListResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ActionListResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ActionListResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ActionListResponse) GetCorrectActionListResponse() *CorrectActionListResponse {
	if x, ok := x.GetResponse().(*ActionListResponse_CorrectActionListResponse); ok {
		return x.CorrectActionListResponse
	}
	return nil
}

type isActionListResponse_Response interface {
	isActionListResponse_Response()
}

type ActionListResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ActionListResponse_CorrectActionListResponse struct {
	CorrectActionListResponse *CorrectActionListResponse `protobuf:"bytes,2,opt,name=correctActionListResponse,proto3,oneof"`
}

func (*ActionListResponse_Error) isActionListResponse_Response() {}

func (*ActionListResponse_CorrectActionListResponse) isActionListResponse_Response() {}

type ActionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *ActionListRequest) Reset() {
	*x = ActionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionListRequest) ProtoMessage() {}

func (x *ActionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionListRequest.ProtoReflect.Descriptor instead.
func (*ActionListRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{63}
}

func (x *ActionListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActionListRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type PatternDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *PatternDetailsRequest) Reset() {
	*x = PatternDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternDetailsRequest) ProtoMessage() {}

func (x *PatternDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternDetailsRequest.ProtoReflect.Descriptor instead.
func (*PatternDetailsRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{64}
}

func (x *PatternDetailsRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         uint32              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	IsActual      bool                `protobuf:"varint,15,opt,name=is_actual,json=isActual,proto3" json:"is_actual,omitempty"`
	ActionId      *ICN                `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	TermInDays    int32               `protobuf:"varint,3,opt,name=term_in_days,json=termInDays,proto3" json:"term_in_days,omitempty"`
	TermInHours   int32               `protobuf:"varint,4,opt,name=term_in_hours,json=termInHours,proto3" json:"term_in_hours,omitempty"`
	TermInMinutes int32               `protobuf:"varint,5,opt,name=term_in_minutes,json=termInMinutes,proto3" json:"term_in_minutes,omitempty"`
	FilesAccess   int32               `protobuf:"varint,18,opt,name=files_access,json=filesAccess,proto3" json:"files_access,omitempty"`
	InSeries      bool                `protobuf:"varint,6,opt,name=in_series,json=inSeries,proto3" json:"in_series,omitempty"`
	Participants  []*ParticipantsData `protobuf:"bytes,7,rep,name=participants,proto3" json:"participants,omitempty"`
	Deadline      string              `protobuf:"bytes,8,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Id            uint32              `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	ListId        uint32              `protobuf:"varint,16,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
	CanAddPart    bool                `protobuf:"varint,10,opt,name=can_add_part,json=canAddPart,proto3" json:"can_add_part,omitempty"`
	CanDelegate   bool                `protobuf:"varint,11,opt,name=can_delegate,json=canDelegate,proto3" json:"can_delegate,omitempty"`
	WaitDelegate  bool                `protobuf:"varint,12,opt,name=wait_delegate,json=waitDelegate,proto3" json:"wait_delegate,omitempty"`
	CanDecline    bool                `protobuf:"varint,13,opt,name=can_decline,json=canDecline,proto3" json:"can_decline,omitempty"`
	NeedConfirm   bool                `protobuf:"varint,14,opt,name=need_confirm,json=needConfirm,proto3" json:"need_confirm,omitempty"`
	ByEds         bool                `protobuf:"varint,17,opt,name=by_eds,json=byEds,proto3" json:"by_eds,omitempty"`
	ByCompanyEds  bool                `protobuf:"varint,19,opt,name=by_company_eds,json=byCompanyEds,proto3" json:"by_company_eds,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{65}
}

func (x *List) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *List) GetIsActual() bool {
	if x != nil {
		return x.IsActual
	}
	return false
}

func (x *List) GetActionId() *ICN {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *List) GetTermInDays() int32 {
	if x != nil {
		return x.TermInDays
	}
	return 0
}

func (x *List) GetTermInHours() int32 {
	if x != nil {
		return x.TermInHours
	}
	return 0
}

func (x *List) GetTermInMinutes() int32 {
	if x != nil {
		return x.TermInMinutes
	}
	return 0
}

func (x *List) GetFilesAccess() int32 {
	if x != nil {
		return x.FilesAccess
	}
	return 0
}

func (x *List) GetInSeries() bool {
	if x != nil {
		return x.InSeries
	}
	return false
}

func (x *List) GetParticipants() []*ParticipantsData {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *List) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *List) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *List) GetListId() uint32 {
	if x != nil {
		return x.ListId
	}
	return 0
}

func (x *List) GetCanAddPart() bool {
	if x != nil {
		return x.CanAddPart
	}
	return false
}

func (x *List) GetCanDelegate() bool {
	if x != nil {
		return x.CanDelegate
	}
	return false
}

func (x *List) GetWaitDelegate() bool {
	if x != nil {
		return x.WaitDelegate
	}
	return false
}

func (x *List) GetCanDecline() bool {
	if x != nil {
		return x.CanDecline
	}
	return false
}

func (x *List) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

func (x *List) GetByEds() bool {
	if x != nil {
		return x.ByEds
	}
	return false
}

func (x *List) GetByCompanyEds() bool {
	if x != nil {
		return x.ByCompanyEds
	}
	return false
}

type PatternDetailsResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notify    bool    `protobuf:"varint,1,opt,name=notify,proto3" json:"notify,omitempty"`
	CanModify bool    `protobuf:"varint,3,opt,name=can_modify,json=canModify,proto3" json:"can_modify,omitempty"`
	Lists     []*List `protobuf:"bytes,2,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *PatternDetailsResponseData) Reset() {
	*x = PatternDetailsResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternDetailsResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternDetailsResponseData) ProtoMessage() {}

func (x *PatternDetailsResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternDetailsResponseData.ProtoReflect.Descriptor instead.
func (*PatternDetailsResponseData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{66}
}

func (x *PatternDetailsResponseData) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

func (x *PatternDetailsResponseData) GetCanModify() bool {
	if x != nil {
		return x.CanModify
	}
	return false
}

func (x *PatternDetailsResponseData) GetLists() []*List {
	if x != nil {
		return x.Lists
	}
	return nil
}

type PatternDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*PatternDetailsResponse_Error
	//	*PatternDetailsResponse_Data
	Response isPatternDetailsResponse_Response `protobuf_oneof:"response"`
}

func (x *PatternDetailsResponse) Reset() {
	*x = PatternDetailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternDetailsResponse) ProtoMessage() {}

func (x *PatternDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternDetailsResponse.ProtoReflect.Descriptor instead.
func (*PatternDetailsResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{67}
}

func (m *PatternDetailsResponse) GetResponse() isPatternDetailsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *PatternDetailsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*PatternDetailsResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *PatternDetailsResponse) GetData() *PatternDetailsResponseData {
	if x, ok := x.GetResponse().(*PatternDetailsResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isPatternDetailsResponse_Response interface {
	isPatternDetailsResponse_Response()
}

type PatternDetailsResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type PatternDetailsResponse_Data struct {
	Data *PatternDetailsResponseData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*PatternDetailsResponse_Error) isPatternDetailsResponse_Response() {}

func (*PatternDetailsResponse_Data) isPatternDetailsResponse_Response() {}

type CreateRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lists  []*CreateRouterRequestList `protobuf:"bytes,1,rep,name=lists,proto3" json:"lists,omitempty"`
	Notify bool                       `protobuf:"varint,2,opt,name=notify,proto3" json:"notify,omitempty"`
}

func (x *CreateRouterRequest) Reset() {
	*x = CreateRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouterRequest) ProtoMessage() {}

func (x *CreateRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouterRequest.ProtoReflect.Descriptor instead.
func (*CreateRouterRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{68}
}

func (x *CreateRouterRequest) GetLists() []*CreateRouterRequestList {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *CreateRouterRequest) GetNotify() bool {
	if x != nil {
		return x.Notify
	}
	return false
}

type CorrectCreateRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *CorrectCreateRouterResponse) Reset() {
	*x = CorrectCreateRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectCreateRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectCreateRouterResponse) ProtoMessage() {}

func (x *CorrectCreateRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectCreateRouterResponse.ProtoReflect.Descriptor instead.
func (*CorrectCreateRouterResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{69}
}

func (x *CorrectCreateRouterResponse) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type CreateRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*CreateRouterResponse_Error
	//	*CreateRouterResponse_CorrectCreateRouterResponse
	Response isCreateRouterResponse_Response `protobuf_oneof:"response"`
}

func (x *CreateRouterResponse) Reset() {
	*x = CreateRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouterResponse) ProtoMessage() {}

func (x *CreateRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouterResponse.ProtoReflect.Descriptor instead.
func (*CreateRouterResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{70}
}

func (m *CreateRouterResponse) GetResponse() isCreateRouterResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CreateRouterResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*CreateRouterResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *CreateRouterResponse) GetCorrectCreateRouterResponse() *CorrectCreateRouterResponse {
	if x, ok := x.GetResponse().(*CreateRouterResponse_CorrectCreateRouterResponse); ok {
		return x.CorrectCreateRouterResponse
	}
	return nil
}

type isCreateRouterResponse_Response interface {
	isCreateRouterResponse_Response()
}

type CreateRouterResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type CreateRouterResponse_CorrectCreateRouterResponse struct {
	CorrectCreateRouterResponse *CorrectCreateRouterResponse `protobuf:"bytes,2,opt,name=correctCreateRouterResponse,proto3,oneof"`
}

func (*CreateRouterResponse_Error) isCreateRouterResponse_Response() {}

func (*CreateRouterResponse_CorrectCreateRouterResponse) isCreateRouterResponse_Response() {}

type DetailStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsoUserId     uint32 `protobuf:"varint,1,opt,name=sso_user_id,json=ssoUserId,proto3" json:"sso_user_id,omitempty"`
	SsoEmployeeId uint32 `protobuf:"varint,2,opt,name=sso_employee_id,json=ssoEmployeeId,proto3" json:"sso_employee_id,omitempty"`
	RouteId       uint32 `protobuf:"varint,3,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *DetailStateRequest) Reset() {
	*x = DetailStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailStateRequest) ProtoMessage() {}

func (x *DetailStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailStateRequest.ProtoReflect.Descriptor instead.
func (*DetailStateRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{71}
}

func (x *DetailStateRequest) GetSsoUserId() uint32 {
	if x != nil {
		return x.SsoUserId
	}
	return 0
}

func (x *DetailStateRequest) GetSsoEmployeeId() uint32 {
	if x != nil {
		return x.SsoEmployeeId
	}
	return 0
}

func (x *DetailStateRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type CorrectDetailStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decision            *DecisionBtn `protobuf:"bytes,1,opt,name=decision,proto3" json:"decision,omitempty"`
	Delegate            bool         `protobuf:"varint,2,opt,name=delegate,proto3" json:"delegate,omitempty"`
	FullDelegateOnly    bool         `protobuf:"varint,6,opt,name=full_delegate_only,json=fullDelegateOnly,proto3" json:"full_delegate_only,omitempty"`
	AddParticipants     bool         `protobuf:"varint,3,opt,name=add_participants,json=addParticipants,proto3" json:"add_participants,omitempty"`
	RevisionParticipant bool         `protobuf:"varint,4,opt,name=revision_participant,json=revisionParticipant,proto3" json:"revision_participant,omitempty"`
	Decline             bool         `protobuf:"varint,5,opt,name=decline,proto3" json:"decline,omitempty"`
}

func (x *CorrectDetailStateResponse) Reset() {
	*x = CorrectDetailStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectDetailStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectDetailStateResponse) ProtoMessage() {}

func (x *CorrectDetailStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectDetailStateResponse.ProtoReflect.Descriptor instead.
func (*CorrectDetailStateResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{72}
}

func (x *CorrectDetailStateResponse) GetDecision() *DecisionBtn {
	if x != nil {
		return x.Decision
	}
	return nil
}

func (x *CorrectDetailStateResponse) GetDelegate() bool {
	if x != nil {
		return x.Delegate
	}
	return false
}

func (x *CorrectDetailStateResponse) GetFullDelegateOnly() bool {
	if x != nil {
		return x.FullDelegateOnly
	}
	return false
}

func (x *CorrectDetailStateResponse) GetAddParticipants() bool {
	if x != nil {
		return x.AddParticipants
	}
	return false
}

func (x *CorrectDetailStateResponse) GetRevisionParticipant() bool {
	if x != nil {
		return x.RevisionParticipant
	}
	return false
}

func (x *CorrectDetailStateResponse) GetDecline() bool {
	if x != nil {
		return x.Decline
	}
	return false
}

type DetailStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DetailStateResponse_Error
	//	*DetailStateResponse_CorrectDetailStateResponse
	Response isDetailStateResponse_Response `protobuf_oneof:"response"`
}

func (x *DetailStateResponse) Reset() {
	*x = DetailStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailStateResponse) ProtoMessage() {}

func (x *DetailStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailStateResponse.ProtoReflect.Descriptor instead.
func (*DetailStateResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{73}
}

func (m *DetailStateResponse) GetResponse() isDetailStateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DetailStateResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*DetailStateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *DetailStateResponse) GetCorrectDetailStateResponse() *CorrectDetailStateResponse {
	if x, ok := x.GetResponse().(*DetailStateResponse_CorrectDetailStateResponse); ok {
		return x.CorrectDetailStateResponse
	}
	return nil
}

type isDetailStateResponse_Response interface {
	isDetailStateResponse_Response()
}

type DetailStateResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type DetailStateResponse_CorrectDetailStateResponse struct {
	CorrectDetailStateResponse *CorrectDetailStateResponse `protobuf:"bytes,2,opt,name=correctDetailStateResponse,proto3,oneof"`
}

func (*DetailStateResponse_Error) isDetailStateResponse_Response() {}

func (*DetailStateResponse_CorrectDetailStateResponse) isDetailStateResponse_Response() {}

type DecisionBtn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Access       bool   `protobuf:"varint,1,opt,name=access,proto3" json:"access,omitempty"`
	Resolution   bool   `protobuf:"varint,5,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Register     bool   `protobuf:"varint,6,opt,name=register,proto3" json:"register,omitempty"`
	ByEds        bool   `protobuf:"varint,2,opt,name=by_eds,json=byEds,proto3" json:"by_eds,omitempty"`
	ByCompanyEds bool   `protobuf:"varint,7,opt,name=by_company_eds,json=byCompanyEds,proto3" json:"by_company_eds,omitempty"`
	Text         string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	ListId       int32  `protobuf:"varint,4,opt,name=list_id,json=listId,proto3" json:"list_id,omitempty"`
}

func (x *DecisionBtn) Reset() {
	*x = DecisionBtn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionBtn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionBtn) ProtoMessage() {}

func (x *DecisionBtn) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionBtn.ProtoReflect.Descriptor instead.
func (*DecisionBtn) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{74}
}

func (x *DecisionBtn) GetAccess() bool {
	if x != nil {
		return x.Access
	}
	return false
}

func (x *DecisionBtn) GetResolution() bool {
	if x != nil {
		return x.Resolution
	}
	return false
}

func (x *DecisionBtn) GetRegister() bool {
	if x != nil {
		return x.Register
	}
	return false
}

func (x *DecisionBtn) GetByEds() bool {
	if x != nil {
		return x.ByEds
	}
	return false
}

func (x *DecisionBtn) GetByCompanyEds() bool {
	if x != nil {
		return x.ByCompanyEds
	}
	return false
}

func (x *DecisionBtn) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DecisionBtn) GetListId() int32 {
	if x != nil {
		return x.ListId
	}
	return 0
}

type RevisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*RevisionRequest_Data
	//	*RevisionRequest_Chunk
	Request isRevisionRequest_Request `protobuf_oneof:"request"`
}

func (x *RevisionRequest) Reset() {
	*x = RevisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionRequest) ProtoMessage() {}

func (x *RevisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionRequest.ProtoReflect.Descriptor instead.
func (*RevisionRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{75}
}

func (m *RevisionRequest) GetRequest() isRevisionRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *RevisionRequest) GetData() *RevisionData {
	if x, ok := x.GetRequest().(*RevisionRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (x *RevisionRequest) GetChunk() *Chunk {
	if x, ok := x.GetRequest().(*RevisionRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isRevisionRequest_Request interface {
	isRevisionRequest_Request()
}

type RevisionRequest_Data struct {
	Data *RevisionData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type RevisionRequest_Chunk struct {
	Chunk *Chunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*RevisionRequest_Data) isRevisionRequest_Request() {}

func (*RevisionRequest_Chunk) isRevisionRequest_Request() {}

type RevisionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherParticipants []*ICN      `protobuf:"bytes,6,rep,name=other_participants,json=otherParticipants,proto3" json:"other_participants,omitempty"`
	FolderData        *FolderData `protobuf:"bytes,1,opt,name=folder_data,json=folderData,proto3" json:"folder_data,omitempty"`
	Context           *Context    `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	Comment           string      `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	RouteId           int32       `protobuf:"varint,4,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	CompanyId         int32       `protobuf:"varint,5,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *RevisionData) Reset() {
	*x = RevisionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionData) ProtoMessage() {}

func (x *RevisionData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionData.ProtoReflect.Descriptor instead.
func (*RevisionData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{76}
}

func (x *RevisionData) GetOtherParticipants() []*ICN {
	if x != nil {
		return x.OtherParticipants
	}
	return nil
}

func (x *RevisionData) GetFolderData() *FolderData {
	if x != nil {
		return x.FolderData
	}
	return nil
}

func (x *RevisionData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RevisionData) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *RevisionData) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *RevisionData) GetCompanyId() int32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

type RevisionResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status             *ICNM               `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Action             *ICNM               `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	CurrentParticipant *CurrentParticipant `protobuf:"bytes,3,opt,name=current_participant,json=currentParticipant,proto3" json:"current_participant,omitempty"`
}

func (x *RevisionResponseData) Reset() {
	*x = RevisionResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionResponseData) ProtoMessage() {}

func (x *RevisionResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionResponseData.ProtoReflect.Descriptor instead.
func (*RevisionResponseData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{77}
}

func (x *RevisionResponseData) GetStatus() *ICNM {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RevisionResponseData) GetAction() *ICNM {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *RevisionResponseData) GetCurrentParticipant() *CurrentParticipant {
	if x != nil {
		return x.CurrentParticipant
	}
	return nil
}

type OwnerReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*OwnerReviewResponse_Error
	//	*OwnerReviewResponse_Data
	Response isOwnerReviewResponse_Response `protobuf_oneof:"response"`
}

func (x *OwnerReviewResponse) Reset() {
	*x = OwnerReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerReviewResponse) ProtoMessage() {}

func (x *OwnerReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerReviewResponse.ProtoReflect.Descriptor instead.
func (*OwnerReviewResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{78}
}

func (m *OwnerReviewResponse) GetResponse() isOwnerReviewResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *OwnerReviewResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*OwnerReviewResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *OwnerReviewResponse) GetData() *RevisionResponseData {
	if x, ok := x.GetResponse().(*OwnerReviewResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isOwnerReviewResponse_Response interface {
	isOwnerReviewResponse_Response()
}

type OwnerReviewResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type OwnerReviewResponse_Data struct {
	Data *RevisionResponseData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*OwnerReviewResponse_Error) isOwnerReviewResponse_Response() {}

func (*OwnerReviewResponse_Data) isOwnerReviewResponse_Response() {}

type StopProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *StopProcessRequest) Reset() {
	*x = StopProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopProcessRequest) ProtoMessage() {}

func (x *StopProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopProcessRequest.ProtoReflect.Descriptor instead.
func (*StopProcessRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{79}
}

func (x *StopProcessRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type ApproveCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *ApproveCompletionRequest) Reset() {
	*x = ApproveCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveCompletionRequest) ProtoMessage() {}

func (x *ApproveCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveCompletionRequest.ProtoReflect.Descriptor instead.
func (*ApproveCompletionRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{80}
}

func (x *ApproveCompletionRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type ParticipantsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateInitiator uint32          `protobuf:"varint,5,opt,name=update_initiator,json=updateInitiator,proto3" json:"update_initiator,omitempty"`
	ToAdd           []*ICN          `protobuf:"bytes,2,rep,name=to_add,json=toAdd,proto3" json:"to_add,omitempty"`
	ToDel           []*ICN          `protobuf:"bytes,3,rep,name=to_del,json=toDel,proto3" json:"to_del,omitempty"`
	InvitationData  *InvitationData `protobuf:"bytes,4,opt,name=invitation_data,json=invitationData,proto3" json:"invitation_data,omitempty"`
}

func (x *ParticipantsUpdateRequest) Reset() {
	*x = ParticipantsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsUpdateRequest) ProtoMessage() {}

func (x *ParticipantsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsUpdateRequest.ProtoReflect.Descriptor instead.
func (*ParticipantsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{81}
}

func (x *ParticipantsUpdateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ParticipantsUpdateRequest) GetUpdateInitiator() uint32 {
	if x != nil {
		return x.UpdateInitiator
	}
	return 0
}

func (x *ParticipantsUpdateRequest) GetToAdd() []*ICN {
	if x != nil {
		return x.ToAdd
	}
	return nil
}

func (x *ParticipantsUpdateRequest) GetToDel() []*ICN {
	if x != nil {
		return x.ToDel
	}
	return nil
}

func (x *ParticipantsUpdateRequest) GetInvitationData() *InvitationData {
	if x != nil {
		return x.InvitationData
	}
	return nil
}

type ParticipantsUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ParticipantsUpdateResponse_Error
	//	*ParticipantsUpdateResponse_CorrectParticipantsUpdateResponse
	Response isParticipantsUpdateResponse_Response `protobuf_oneof:"response"`
}

func (x *ParticipantsUpdateResponse) Reset() {
	*x = ParticipantsUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantsUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsUpdateResponse) ProtoMessage() {}

func (x *ParticipantsUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsUpdateResponse.ProtoReflect.Descriptor instead.
func (*ParticipantsUpdateResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{82}
}

func (m *ParticipantsUpdateResponse) GetResponse() isParticipantsUpdateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ParticipantsUpdateResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ParticipantsUpdateResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ParticipantsUpdateResponse) GetCorrectParticipantsUpdateResponse() *emptypb.Empty {
	if x, ok := x.GetResponse().(*ParticipantsUpdateResponse_CorrectParticipantsUpdateResponse); ok {
		return x.CorrectParticipantsUpdateResponse
	}
	return nil
}

type isParticipantsUpdateResponse_Response interface {
	isParticipantsUpdateResponse_Response()
}

type ParticipantsUpdateResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ParticipantsUpdateResponse_CorrectParticipantsUpdateResponse struct {
	CorrectParticipantsUpdateResponse *emptypb.Empty `protobuf:"bytes,2,opt,name=correctParticipantsUpdateResponse,proto3,oneof"`
}

func (*ParticipantsUpdateResponse_Error) isParticipantsUpdateResponse_Response() {}

func (*ParticipantsUpdateResponse_CorrectParticipantsUpdateResponse) isParticipantsUpdateResponse_Response() {
}

type ActionDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ActionDataResponse_Error
	//	*ActionDataResponse_CorrectActionDataResponse
	Response isActionDataResponse_Response `protobuf_oneof:"response"`
}

func (x *ActionDataResponse) Reset() {
	*x = ActionDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDataResponse) ProtoMessage() {}

func (x *ActionDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDataResponse.ProtoReflect.Descriptor instead.
func (*ActionDataResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{83}
}

func (m *ActionDataResponse) GetResponse() isActionDataResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ActionDataResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ActionDataResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ActionDataResponse) GetCorrectActionDataResponse() *ICN {
	if x, ok := x.GetResponse().(*ActionDataResponse_CorrectActionDataResponse); ok {
		return x.CorrectActionDataResponse
	}
	return nil
}

type isActionDataResponse_Response interface {
	isActionDataResponse_Response()
}

type ActionDataResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ActionDataResponse_CorrectActionDataResponse struct {
	CorrectActionDataResponse *ICN `protobuf:"bytes,2,opt,name=correctActionDataResponse,proto3,oneof"`
}

func (*ActionDataResponse_Error) isActionDataResponse_Response() {}

func (*ActionDataResponse_CorrectActionDataResponse) isActionDataResponse_Response() {}

type MakingResolutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context          *Context          `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	RouteId          uint32            `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	ParticipantData  *ParticipantsData `protobuf:"bytes,2,opt,name=participant_data,json=participantData,proto3" json:"participant_data,omitempty"`
	Data             []*ResolutionData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Comment          string            `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	ActuallyExecuted int32             `protobuf:"varint,5,opt,name=actually_executed,json=actuallyExecuted,proto3" json:"actually_executed,omitempty"`
}

func (x *MakingResolutionRequest) Reset() {
	*x = MakingResolutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakingResolutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakingResolutionRequest) ProtoMessage() {}

func (x *MakingResolutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakingResolutionRequest.ProtoReflect.Descriptor instead.
func (*MakingResolutionRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{84}
}

func (x *MakingResolutionRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *MakingResolutionRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *MakingResolutionRequest) GetParticipantData() *ParticipantsData {
	if x != nil {
		return x.ParticipantData
	}
	return nil
}

func (x *MakingResolutionRequest) GetData() []*ResolutionData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MakingResolutionRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MakingResolutionRequest) GetActuallyExecuted() int32 {
	if x != nil {
		return x.ActuallyExecuted
	}
	return 0
}

type ResolutionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32   `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	RouteId        uint32   `protobuf:"varint,6,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	ResolutionType *ICN     `protobuf:"bytes,1,opt,name=resolution_type,json=resolutionType,proto3" json:"resolution_type,omitempty"`
	Comment        string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Deadline       string   `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Executors      []uint32 `protobuf:"varint,4,rep,packed,name=executors,proto3" json:"executors,omitempty"`
}

func (x *ResolutionData) Reset() {
	*x = ResolutionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionData) ProtoMessage() {}

func (x *ResolutionData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionData.ProtoReflect.Descriptor instead.
func (*ResolutionData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{85}
}

func (x *ResolutionData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResolutionData) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *ResolutionData) GetResolutionType() *ICN {
	if x != nil {
		return x.ResolutionType
	}
	return nil
}

func (x *ResolutionData) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ResolutionData) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *ResolutionData) GetExecutors() []uint32 {
	if x != nil {
		return x.Executors
	}
	return nil
}

type CorrectMakingResolutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdjudicationData *CorrectAdjudicationResponse `protobuf:"bytes,3,opt,name=adjudication_data,json=adjudicationData,proto3" json:"adjudication_data,omitempty"`
	Data             []*ResolutionData            `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CorrectMakingResolutionResponse) Reset() {
	*x = CorrectMakingResolutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectMakingResolutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectMakingResolutionResponse) ProtoMessage() {}

func (x *CorrectMakingResolutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectMakingResolutionResponse.ProtoReflect.Descriptor instead.
func (*CorrectMakingResolutionResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{86}
}

func (x *CorrectMakingResolutionResponse) GetAdjudicationData() *CorrectAdjudicationResponse {
	if x != nil {
		return x.AdjudicationData
	}
	return nil
}

func (x *CorrectMakingResolutionResponse) GetData() []*ResolutionData {
	if x != nil {
		return x.Data
	}
	return nil
}

type MakingResolutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*MakingResolutionResponse_Error
	//	*MakingResolutionResponse_CorrectMakingResolutionResponse
	Response isMakingResolutionResponse_Response `protobuf_oneof:"response"`
}

func (x *MakingResolutionResponse) Reset() {
	*x = MakingResolutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakingResolutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakingResolutionResponse) ProtoMessage() {}

func (x *MakingResolutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakingResolutionResponse.ProtoReflect.Descriptor instead.
func (*MakingResolutionResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{87}
}

func (m *MakingResolutionResponse) GetResponse() isMakingResolutionResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *MakingResolutionResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*MakingResolutionResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *MakingResolutionResponse) GetCorrectMakingResolutionResponse() *CorrectMakingResolutionResponse {
	if x, ok := x.GetResponse().(*MakingResolutionResponse_CorrectMakingResolutionResponse); ok {
		return x.CorrectMakingResolutionResponse
	}
	return nil
}

type isMakingResolutionResponse_Response interface {
	isMakingResolutionResponse_Response()
}

type MakingResolutionResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type MakingResolutionResponse_CorrectMakingResolutionResponse struct {
	CorrectMakingResolutionResponse *CorrectMakingResolutionResponse `protobuf:"bytes,2,opt,name=correctMakingResolutionResponse,proto3,oneof"`
}

func (*MakingResolutionResponse_Error) isMakingResolutionResponse_Response() {}

func (*MakingResolutionResponse_CorrectMakingResolutionResponse) isMakingResolutionResponse_Response() {
}

type ConfStamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code          string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SecrecyLevel  uint32 `protobuf:"varint,4,opt,name=secrecy_level,json=secrecyLevel,proto3" json:"secrecy_level,omitempty"`
	AllowAdd      bool   `protobuf:"varint,5,opt,name=allow_add,json=allowAdd,proto3" json:"allow_add,omitempty"`
	AllowDownload bool   `protobuf:"varint,6,opt,name=allow_download,json=allowDownload,proto3" json:"allow_download,omitempty"`
	Color         string `protobuf:"bytes,7,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *ConfStamp) Reset() {
	*x = ConfStamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfStamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfStamp) ProtoMessage() {}

func (x *ConfStamp) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfStamp.ProtoReflect.Descriptor instead.
func (*ConfStamp) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{88}
}

func (x *ConfStamp) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ConfStamp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ConfStamp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfStamp) GetSecrecyLevel() uint32 {
	if x != nil {
		return x.SecrecyLevel
	}
	return 0
}

func (x *ConfStamp) GetAllowAdd() bool {
	if x != nil {
		return x.AllowAdd
	}
	return false
}

func (x *ConfStamp) GetAllowDownload() bool {
	if x != nil {
		return x.AllowDownload
	}
	return false
}

func (x *ConfStamp) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type IdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId uint32 `protobuf:"varint,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *IdType) Reset() {
	*x = IdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdType) ProtoMessage() {}

func (x *IdType) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdType.ProtoReflect.Descriptor instead.
func (*IdType) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{89}
}

func (x *IdType) GetDocId() uint32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *IdType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IdType `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RelationRequest) Reset() {
	*x = RelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationRequest) ProtoMessage() {}

func (x *RelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationRequest.ProtoReflect.Descriptor instead.
func (*RelationRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{90}
}

func (x *RelationRequest) GetData() []*IdType {
	if x != nil {
		return x.Data
	}
	return nil
}

type RelationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type        string     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Code        string     `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	Name        string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt   string     `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status      *ICN       `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Conf        *ConfStamp `protobuf:"bytes,6,opt,name=conf,proto3" json:"conf,omitempty"`
	Author      string     `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Description string     `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Number      string     `protobuf:"bytes,10,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *RelationData) Reset() {
	*x = RelationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationData) ProtoMessage() {}

func (x *RelationData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationData.ProtoReflect.Descriptor instead.
func (*RelationData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{91}
}

func (x *RelationData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RelationData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelationData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RelationData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelationData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RelationData) GetStatus() *ICN {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RelationData) GetConf() *ConfStamp {
	if x != nil {
		return x.Conf
	}
	return nil
}

func (x *RelationData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *RelationData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RelationData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type CorrectRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relations []*RelationData `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (x *CorrectRelationResponse) Reset() {
	*x = CorrectRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectRelationResponse) ProtoMessage() {}

func (x *CorrectRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectRelationResponse.ProtoReflect.Descriptor instead.
func (*CorrectRelationResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{92}
}

func (x *CorrectRelationResponse) GetRelations() []*RelationData {
	if x != nil {
		return x.Relations
	}
	return nil
}

type RelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*RelationResponse_Error
	//	*RelationResponse_CorrectRelationResponse
	Response isRelationResponse_Response `protobuf_oneof:"response"`
}

func (x *RelationResponse) Reset() {
	*x = RelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationResponse) ProtoMessage() {}

func (x *RelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationResponse.ProtoReflect.Descriptor instead.
func (*RelationResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{93}
}

func (m *RelationResponse) GetResponse() isRelationResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *RelationResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*RelationResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *RelationResponse) GetCorrectRelationResponse() *CorrectRelationResponse {
	if x, ok := x.GetResponse().(*RelationResponse_CorrectRelationResponse); ok {
		return x.CorrectRelationResponse
	}
	return nil
}

type isRelationResponse_Response interface {
	isRelationResponse_Response()
}

type RelationResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type RelationResponse_CorrectRelationResponse struct {
	CorrectRelationResponse *CorrectRelationResponse `protobuf:"bytes,2,opt,name=correctRelationResponse,proto3,oneof"`
}

func (*RelationResponse_Error) isRelationResponse_Response() {}

func (*RelationResponse_CorrectRelationResponse) isRelationResponse_Response() {}

type ResolutionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId int32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *ResolutionListRequest) Reset() {
	*x = ResolutionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionListRequest) ProtoMessage() {}

func (x *ResolutionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionListRequest.ProtoReflect.Descriptor instead.
func (*ResolutionListRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{94}
}

func (x *ResolutionListRequest) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type ResolutionListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32    `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	ResolutionType string   `protobuf:"bytes,1,opt,name=resolution_type,json=resolutionType,proto3" json:"resolution_type,omitempty"`
	Executors      []string `protobuf:"bytes,2,rep,name=executors,proto3" json:"executors,omitempty"`
	Deadline       string   `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	Author         string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Comment        string   `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ResolutionListData) Reset() {
	*x = ResolutionListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionListData) ProtoMessage() {}

func (x *ResolutionListData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionListData.ProtoReflect.Descriptor instead.
func (*ResolutionListData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{95}
}

func (x *ResolutionListData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResolutionListData) GetResolutionType() string {
	if x != nil {
		return x.ResolutionType
	}
	return ""
}

func (x *ResolutionListData) GetExecutors() []string {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *ResolutionListData) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *ResolutionListData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ResolutionListData) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type CorrectResolutionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ResolutionListData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CorrectResolutionListResponse) Reset() {
	*x = CorrectResolutionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectResolutionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectResolutionListResponse) ProtoMessage() {}

func (x *CorrectResolutionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectResolutionListResponse.ProtoReflect.Descriptor instead.
func (*CorrectResolutionListResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{96}
}

func (x *CorrectResolutionListResponse) GetData() []*ResolutionListData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResolutionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ResolutionListResponse_Error
	//	*ResolutionListResponse_CorrectResolutionListResponse
	Response isResolutionListResponse_Response `protobuf_oneof:"response"`
}

func (x *ResolutionListResponse) Reset() {
	*x = ResolutionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionListResponse) ProtoMessage() {}

func (x *ResolutionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionListResponse.ProtoReflect.Descriptor instead.
func (*ResolutionListResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{97}
}

func (m *ResolutionListResponse) GetResponse() isResolutionListResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ResolutionListResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ResolutionListResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ResolutionListResponse) GetCorrectResolutionListResponse() *CorrectResolutionListResponse {
	if x, ok := x.GetResponse().(*ResolutionListResponse_CorrectResolutionListResponse); ok {
		return x.CorrectResolutionListResponse
	}
	return nil
}

type isResolutionListResponse_Response interface {
	isResolutionListResponse_Response()
}

type ResolutionListResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ResolutionListResponse_CorrectResolutionListResponse struct {
	CorrectResolutionListResponse *CorrectResolutionListResponse `protobuf:"bytes,2,opt,name=correctResolutionListResponse,proto3,oneof"`
}

func (*ResolutionListResponse_Error) isResolutionListResponse_Response() {}

func (*ResolutionListResponse_CorrectResolutionListResponse) isResolutionListResponse_Response() {}

type CorrectResolutionsAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*CorrectResolutionsAssignmentsResponseItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CorrectResolutionsAssignmentsResponse) Reset() {
	*x = CorrectResolutionsAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectResolutionsAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectResolutionsAssignmentsResponse) ProtoMessage() {}

func (x *CorrectResolutionsAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectResolutionsAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*CorrectResolutionsAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{98}
}

func (x *CorrectResolutionsAssignmentsResponse) GetData() []*CorrectResolutionsAssignmentsResponseItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResolutionsAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ResolutionsAssignmentsResponse_Error
	//	*ResolutionsAssignmentsResponse_CorrectResolutionsAssignmentsResponse
	Response isResolutionsAssignmentsResponse_Response `protobuf_oneof:"response"`
}

func (x *ResolutionsAssignmentsResponse) Reset() {
	*x = ResolutionsAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionsAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionsAssignmentsResponse) ProtoMessage() {}

func (x *ResolutionsAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionsAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*ResolutionsAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{99}
}

func (m *ResolutionsAssignmentsResponse) GetResponse() isResolutionsAssignmentsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ResolutionsAssignmentsResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*ResolutionsAssignmentsResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ResolutionsAssignmentsResponse) GetCorrectResolutionsAssignmentsResponse() *CorrectResolutionsAssignmentsResponse {
	if x, ok := x.GetResponse().(*ResolutionsAssignmentsResponse_CorrectResolutionsAssignmentsResponse); ok {
		return x.CorrectResolutionsAssignmentsResponse
	}
	return nil
}

type isResolutionsAssignmentsResponse_Response interface {
	isResolutionsAssignmentsResponse_Response()
}

type ResolutionsAssignmentsResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type ResolutionsAssignmentsResponse_CorrectResolutionsAssignmentsResponse struct {
	CorrectResolutionsAssignmentsResponse *CorrectResolutionsAssignmentsResponse `protobuf:"bytes,2,opt,name=correctResolutionsAssignmentsResponse,proto3,oneof"`
}

func (*ResolutionsAssignmentsResponse_Error) isResolutionsAssignmentsResponse_Response() {}

func (*ResolutionsAssignmentsResponse_CorrectResolutionsAssignmentsResponse) isResolutionsAssignmentsResponse_Response() {
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{100}
}

func (x *Company) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Company) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Company) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Executor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contacts []string `protobuf:"bytes,2,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *Executor) Reset() {
	*x = Executor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Executor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Executor) ProtoMessage() {}

func (x *Executor) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Executor.ProtoReflect.Descriptor instead.
func (*Executor) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{101}
}

func (x *Executor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Executor) GetContacts() []string {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type Executors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Executors []*Executor `protobuf:"bytes,2,rep,name=executors,proto3" json:"executors,omitempty"`
}

func (x *Executors) Reset() {
	*x = Executors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Executors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Executors) ProtoMessage() {}

func (x *Executors) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Executors.ProtoReflect.Descriptor instead.
func (*Executors) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{102}
}

func (x *Executors) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Executors) GetExecutors() []*Executor {
	if x != nil {
		return x.Executors
	}
	return nil
}

type PdfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterData               []*List                 `protobuf:"bytes,7,rep,name=router_data,json=routerData,proto3" json:"router_data,omitempty"`
	CompanyId                *Company                `protobuf:"bytes,8,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Executors                *Executors              `protobuf:"bytes,38,opt,name=executors,proto3" json:"executors,omitempty"`
	Attachment               *PdfData_AttachmentData `protobuf:"bytes,46,opt,name=attachment,proto3" json:"attachment,omitempty"`
	CurrencyId               *ICN                    `protobuf:"bytes,9,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	DocCategoryId            *ICN                    `protobuf:"bytes,10,opt,name=doc_category_id,json=docCategoryId,proto3" json:"doc_category_id,omitempty"`
	TypeTreatment            *ICN                    `protobuf:"bytes,11,opt,name=type_treatment,json=typeTreatment,proto3" json:"type_treatment,omitempty"`
	CharacterTreatment       *ICN                    `protobuf:"bytes,12,opt,name=character_treatment,json=characterTreatment,proto3" json:"character_treatment,omitempty"`
	SocialStatus             *ICN                    `protobuf:"bytes,13,opt,name=social_status,json=socialStatus,proto3" json:"social_status,omitempty"`
	SenderReceiver           *ICN                    `protobuf:"bytes,14,opt,name=sender_receiver,json=senderReceiver,proto3" json:"sender_receiver,omitempty"`
	ApprovalAuthorityId      *ICN                    `protobuf:"bytes,15,opt,name=approval_authority_id,json=approvalAuthorityId,proto3" json:"approval_authority_id,omitempty"`
	DepartId                 *ICN                    `protobuf:"bytes,16,opt,name=depart_id,json=departId,proto3" json:"depart_id,omitempty"`
	NewDepartId              *ICN                    `protobuf:"bytes,72,opt,name=new_depart_id,json=newDepartId,proto3" json:"new_depart_id,omitempty"`
	UpdatePeriodId           *ICN                    `protobuf:"bytes,17,opt,name=update_period_id,json=updatePeriodId,proto3" json:"update_period_id,omitempty"`
	ConfStampId              *ICN                    `protobuf:"bytes,18,opt,name=conf_stamp_id,json=confStampId,proto3" json:"conf_stamp_id,omitempty"`
	ConfBasisId              *ICN                    `protobuf:"bytes,19,opt,name=conf_basis_id,json=confBasisId,proto3" json:"conf_basis_id,omitempty"`
	GroupId                  *ICN                    `protobuf:"bytes,20,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	SubgroupId               *ICN                    `protobuf:"bytes,21,opt,name=subgroup_id,json=subgroupId,proto3" json:"subgroup_id,omitempty"`
	CaseId                   *ICN                    `protobuf:"bytes,22,opt,name=case_id,json=caseId,proto3" json:"case_id,omitempty"`
	EmployeeId               *ICN                    `protobuf:"bytes,66,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	EmployeeCategoryId       *ICN                    `protobuf:"bytes,47,opt,name=employee_category_id,json=employeeCategoryId,proto3" json:"employee_category_id,omitempty"`
	BusinessTripTypeId       *ICN                    `protobuf:"bytes,48,opt,name=business_trip_type_id,json=businessTripTypeId,proto3" json:"business_trip_type_id,omitempty"`
	SignatoryId              *ICN                    `protobuf:"bytes,49,opt,name=signatory_id,json=signatoryId,proto3" json:"signatory_id,omitempty"`
	SignatoryPosition        *ICN                    `protobuf:"bytes,50,opt,name=signatory_position,json=signatoryPosition,proto3" json:"signatory_position,omitempty"`
	PositionId               *ICN                    `protobuf:"bytes,51,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	NewPositionId            *ICN                    `protobuf:"bytes,71,opt,name=new_position_id,json=newPositionId,proto3" json:"new_position_id,omitempty"`
	DismissalReasonId        *ICN                    `protobuf:"bytes,52,opt,name=dismissal_reason_id,json=dismissalReasonId,proto3" json:"dismissal_reason_id,omitempty"`
	VacationGroupId          *ICN                    `protobuf:"bytes,53,opt,name=vacation_group_id,json=vacationGroupId,proto3" json:"vacation_group_id,omitempty"`
	VacationTypeId           *ICN                    `protobuf:"bytes,54,opt,name=vacation_type_id,json=vacationTypeId,proto3" json:"vacation_type_id,omitempty"`
	TransferTypeId           *ICN                    `protobuf:"bytes,55,opt,name=transfer_type_id,json=transferTypeId,proto3" json:"transfer_type_id,omitempty"`
	Creator                  *ICN                    `protobuf:"bytes,33,opt,name=creator,proto3" json:"creator,omitempty"`
	ConvertedAttachment      uint32                  `protobuf:"varint,77,opt,name=converted_attachment,json=convertedAttachment,proto3" json:"converted_attachment,omitempty"`
	CreatorId                uint32                  `protobuf:"varint,23,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	DocId                    uint32                  `protobuf:"varint,40,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	ProbationPeriod          uint32                  `protobuf:"varint,74,opt,name=probation_period,json=probationPeriod,proto3" json:"probation_period,omitempty"`
	DaysCount                int32                   `protobuf:"varint,67,opt,name=days_count,json=daysCount,proto3" json:"days_count,omitempty"`
	Amount                   float32                 `protobuf:"fixed32,24,opt,name=amount,proto3" json:"amount,omitempty"`
	VatAmount                float32                 `protobuf:"fixed32,25,opt,name=vat_amount,json=vatAmount,proto3" json:"vat_amount,omitempty"`
	TripPurpose              string                  `protobuf:"bytes,56,opt,name=trip_purpose,json=tripPurpose,proto3" json:"trip_purpose,omitempty"`
	Location                 string                  `protobuf:"bytes,57,opt,name=location,proto3" json:"location,omitempty"`
	EmploymentContractNumber string                  `protobuf:"bytes,58,opt,name=employment_contract_number,json=employmentContractNumber,proto3" json:"employment_contract_number,omitempty"`
	LastDayDate              string                  `protobuf:"bytes,59,opt,name=last_day_date,json=lastDayDate,proto3" json:"last_day_date,omitempty"`
	DismissalDate            string                  `protobuf:"bytes,60,opt,name=dismissal_date,json=dismissalDate,proto3" json:"dismissal_date,omitempty"`
	VacationStartDate        string                  `protobuf:"bytes,61,opt,name=vacation_start_date,json=vacationStartDate,proto3" json:"vacation_start_date,omitempty"`
	EmploymentStartDate      string                  `protobuf:"bytes,62,opt,name=employment_start_date,json=employmentStartDate,proto3" json:"employment_start_date,omitempty"`
	NewWorkPlace             string                  `protobuf:"bytes,63,opt,name=new_work_place,json=newWorkPlace,proto3" json:"new_work_place,omitempty"`
	Type                     string                  `protobuf:"bytes,41,opt,name=type,proto3" json:"type,omitempty"`
	Code                     string                  `protobuf:"bytes,64,opt,name=code,proto3" json:"code,omitempty"`
	ReceivingDate            string                  `protobuf:"bytes,1,opt,name=receiving_date,json=receivingDate,proto3" json:"receiving_date,omitempty"`
	ConfirmDate              string                  `protobuf:"bytes,2,opt,name=confirm_date,json=confirmDate,proto3" json:"confirm_date,omitempty"`
	Deadline                 string                  `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	CreatedAt                string                  `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DateStart                string                  `protobuf:"bytes,5,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	DateEnd                  string                  `protobuf:"bytes,6,opt,name=date_end,json=dateEnd,proto3" json:"date_end,omitempty"`
	SubjectContract          string                  `protobuf:"bytes,26,opt,name=subject_contract,json=subjectContract,proto3" json:"subject_contract,omitempty"`
	Rate                     string                  `protobuf:"bytes,27,opt,name=rate,proto3" json:"rate,omitempty"`
	AuthorAddressee          string                  `protobuf:"bytes,28,opt,name=author_addressee,json=authorAddressee,proto3" json:"author_addressee,omitempty"`
	Name                     string                  `protobuf:"bytes,29,opt,name=name,proto3" json:"name,omitempty"`
	FileName                 string                  `protobuf:"bytes,39,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Description              string                  `protobuf:"bytes,30,opt,name=description,proto3" json:"description,omitempty"`
	DescriptionKaz           string                  `protobuf:"bytes,65,opt,name=description_kaz,json=descriptionKaz,proto3" json:"description_kaz,omitempty"`
	Number                   string                  `protobuf:"bytes,31,opt,name=number,proto3" json:"number,omitempty"`
	GlobalNumber             string                  `protobuf:"bytes,44,opt,name=global_number,json=globalNumber,proto3" json:"global_number,omitempty"`
	OutgoingNumber           string                  `protobuf:"bytes,32,opt,name=outgoing_number,json=outgoingNumber,proto3" json:"outgoing_number,omitempty"`
	ReceiverNumber           string                  `protobuf:"bytes,75,opt,name=receiver_number,json=receiverNumber,proto3" json:"receiver_number,omitempty"`
	ReceiverName             string                  `protobuf:"bytes,76,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	StorageLocation          string                  `protobuf:"bytes,34,opt,name=storage_location,json=storageLocation,proto3" json:"storage_location,omitempty"`
	TypeName                 string                  `protobuf:"bytes,35,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	GroupCode                string                  `protobuf:"bytes,36,opt,name=group_code,json=groupCode,proto3" json:"group_code,omitempty"`
	Assigned                 string                  `protobuf:"bytes,37,opt,name=assigned,proto3" json:"assigned,omitempty"`
	ReturnToWorkDate         string                  `protobuf:"bytes,68,opt,name=return_to_work_date,json=returnToWorkDate,proto3" json:"return_to_work_date,omitempty"`
	TypeNameKz               string                  `protobuf:"bytes,70,opt,name=type_name_kz,json=typeNameKz,proto3" json:"type_name_kz,omitempty"`
	TransferDate             string                  `protobuf:"bytes,73,opt,name=transfer_date,json=transferDate,proto3" json:"transfer_date,omitempty"`
	WithApprovalSheet        bool                    `protobuf:"varint,42,opt,name=with_approval_sheet,json=withApprovalSheet,proto3" json:"with_approval_sheet,omitempty"`
	GenerateCard             bool                    `protobuf:"varint,43,opt,name=generate_card,json=generateCard,proto3" json:"generate_card,omitempty"`
	ConvertAttachments       bool                    `protobuf:"varint,45,opt,name=convert_attachments,json=convertAttachments,proto3" json:"convert_attachments,omitempty"`
	IsStaff                  bool                    `protobuf:"varint,69,opt,name=is_staff,json=isStaff,proto3" json:"is_staff,omitempty"`
}

func (x *PdfData) Reset() {
	*x = PdfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfData) ProtoMessage() {}

func (x *PdfData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfData.ProtoReflect.Descriptor instead.
func (*PdfData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{103}
}

func (x *PdfData) GetRouterData() []*List {
	if x != nil {
		return x.RouterData
	}
	return nil
}

func (x *PdfData) GetCompanyId() *Company {
	if x != nil {
		return x.CompanyId
	}
	return nil
}

func (x *PdfData) GetExecutors() *Executors {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *PdfData) GetAttachment() *PdfData_AttachmentData {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *PdfData) GetCurrencyId() *ICN {
	if x != nil {
		return x.CurrencyId
	}
	return nil
}

func (x *PdfData) GetDocCategoryId() *ICN {
	if x != nil {
		return x.DocCategoryId
	}
	return nil
}

func (x *PdfData) GetTypeTreatment() *ICN {
	if x != nil {
		return x.TypeTreatment
	}
	return nil
}

func (x *PdfData) GetCharacterTreatment() *ICN {
	if x != nil {
		return x.CharacterTreatment
	}
	return nil
}

func (x *PdfData) GetSocialStatus() *ICN {
	if x != nil {
		return x.SocialStatus
	}
	return nil
}

func (x *PdfData) GetSenderReceiver() *ICN {
	if x != nil {
		return x.SenderReceiver
	}
	return nil
}

func (x *PdfData) GetApprovalAuthorityId() *ICN {
	if x != nil {
		return x.ApprovalAuthorityId
	}
	return nil
}

func (x *PdfData) GetDepartId() *ICN {
	if x != nil {
		return x.DepartId
	}
	return nil
}

func (x *PdfData) GetNewDepartId() *ICN {
	if x != nil {
		return x.NewDepartId
	}
	return nil
}

func (x *PdfData) GetUpdatePeriodId() *ICN {
	if x != nil {
		return x.UpdatePeriodId
	}
	return nil
}

func (x *PdfData) GetConfStampId() *ICN {
	if x != nil {
		return x.ConfStampId
	}
	return nil
}

func (x *PdfData) GetConfBasisId() *ICN {
	if x != nil {
		return x.ConfBasisId
	}
	return nil
}

func (x *PdfData) GetGroupId() *ICN {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *PdfData) GetSubgroupId() *ICN {
	if x != nil {
		return x.SubgroupId
	}
	return nil
}

func (x *PdfData) GetCaseId() *ICN {
	if x != nil {
		return x.CaseId
	}
	return nil
}

func (x *PdfData) GetEmployeeId() *ICN {
	if x != nil {
		return x.EmployeeId
	}
	return nil
}

func (x *PdfData) GetEmployeeCategoryId() *ICN {
	if x != nil {
		return x.EmployeeCategoryId
	}
	return nil
}

func (x *PdfData) GetBusinessTripTypeId() *ICN {
	if x != nil {
		return x.BusinessTripTypeId
	}
	return nil
}

func (x *PdfData) GetSignatoryId() *ICN {
	if x != nil {
		return x.SignatoryId
	}
	return nil
}

func (x *PdfData) GetSignatoryPosition() *ICN {
	if x != nil {
		return x.SignatoryPosition
	}
	return nil
}

func (x *PdfData) GetPositionId() *ICN {
	if x != nil {
		return x.PositionId
	}
	return nil
}

func (x *PdfData) GetNewPositionId() *ICN {
	if x != nil {
		return x.NewPositionId
	}
	return nil
}

func (x *PdfData) GetDismissalReasonId() *ICN {
	if x != nil {
		return x.DismissalReasonId
	}
	return nil
}

func (x *PdfData) GetVacationGroupId() *ICN {
	if x != nil {
		return x.VacationGroupId
	}
	return nil
}

func (x *PdfData) GetVacationTypeId() *ICN {
	if x != nil {
		return x.VacationTypeId
	}
	return nil
}

func (x *PdfData) GetTransferTypeId() *ICN {
	if x != nil {
		return x.TransferTypeId
	}
	return nil
}

func (x *PdfData) GetCreator() *ICN {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *PdfData) GetConvertedAttachment() uint32 {
	if x != nil {
		return x.ConvertedAttachment
	}
	return 0
}

func (x *PdfData) GetCreatorId() uint32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *PdfData) GetDocId() uint32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *PdfData) GetProbationPeriod() uint32 {
	if x != nil {
		return x.ProbationPeriod
	}
	return 0
}

func (x *PdfData) GetDaysCount() int32 {
	if x != nil {
		return x.DaysCount
	}
	return 0
}

func (x *PdfData) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PdfData) GetVatAmount() float32 {
	if x != nil {
		return x.VatAmount
	}
	return 0
}

func (x *PdfData) GetTripPurpose() string {
	if x != nil {
		return x.TripPurpose
	}
	return ""
}

func (x *PdfData) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *PdfData) GetEmploymentContractNumber() string {
	if x != nil {
		return x.EmploymentContractNumber
	}
	return ""
}

func (x *PdfData) GetLastDayDate() string {
	if x != nil {
		return x.LastDayDate
	}
	return ""
}

func (x *PdfData) GetDismissalDate() string {
	if x != nil {
		return x.DismissalDate
	}
	return ""
}

func (x *PdfData) GetVacationStartDate() string {
	if x != nil {
		return x.VacationStartDate
	}
	return ""
}

func (x *PdfData) GetEmploymentStartDate() string {
	if x != nil {
		return x.EmploymentStartDate
	}
	return ""
}

func (x *PdfData) GetNewWorkPlace() string {
	if x != nil {
		return x.NewWorkPlace
	}
	return ""
}

func (x *PdfData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PdfData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PdfData) GetReceivingDate() string {
	if x != nil {
		return x.ReceivingDate
	}
	return ""
}

func (x *PdfData) GetConfirmDate() string {
	if x != nil {
		return x.ConfirmDate
	}
	return ""
}

func (x *PdfData) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *PdfData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *PdfData) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *PdfData) GetDateEnd() string {
	if x != nil {
		return x.DateEnd
	}
	return ""
}

func (x *PdfData) GetSubjectContract() string {
	if x != nil {
		return x.SubjectContract
	}
	return ""
}

func (x *PdfData) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *PdfData) GetAuthorAddressee() string {
	if x != nil {
		return x.AuthorAddressee
	}
	return ""
}

func (x *PdfData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PdfData) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PdfData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PdfData) GetDescriptionKaz() string {
	if x != nil {
		return x.DescriptionKaz
	}
	return ""
}

func (x *PdfData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *PdfData) GetGlobalNumber() string {
	if x != nil {
		return x.GlobalNumber
	}
	return ""
}

func (x *PdfData) GetOutgoingNumber() string {
	if x != nil {
		return x.OutgoingNumber
	}
	return ""
}

func (x *PdfData) GetReceiverNumber() string {
	if x != nil {
		return x.ReceiverNumber
	}
	return ""
}

func (x *PdfData) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *PdfData) GetStorageLocation() string {
	if x != nil {
		return x.StorageLocation
	}
	return ""
}

func (x *PdfData) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *PdfData) GetGroupCode() string {
	if x != nil {
		return x.GroupCode
	}
	return ""
}

func (x *PdfData) GetAssigned() string {
	if x != nil {
		return x.Assigned
	}
	return ""
}

func (x *PdfData) GetReturnToWorkDate() string {
	if x != nil {
		return x.ReturnToWorkDate
	}
	return ""
}

func (x *PdfData) GetTypeNameKz() string {
	if x != nil {
		return x.TypeNameKz
	}
	return ""
}

func (x *PdfData) GetTransferDate() string {
	if x != nil {
		return x.TransferDate
	}
	return ""
}

func (x *PdfData) GetWithApprovalSheet() bool {
	if x != nil {
		return x.WithApprovalSheet
	}
	return false
}

func (x *PdfData) GetGenerateCard() bool {
	if x != nil {
		return x.GenerateCard
	}
	return false
}

func (x *PdfData) GetConvertAttachments() bool {
	if x != nil {
		return x.ConvertAttachments
	}
	return false
}

func (x *PdfData) GetIsStaff() bool {
	if x != nil {
		return x.IsStaff
	}
	return false
}

type PdfGenerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context    *Context    `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	FolderData *FolderData `protobuf:"bytes,2,opt,name=folder_data,json=folderData,proto3" json:"folder_data,omitempty"`
	Data       *PdfData    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PdfGenerateRequest) Reset() {
	*x = PdfGenerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfGenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfGenerateRequest) ProtoMessage() {}

func (x *PdfGenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfGenerateRequest.ProtoReflect.Descriptor instead.
func (*PdfGenerateRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{104}
}

func (x *PdfGenerateRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *PdfGenerateRequest) GetFolderData() *FolderData {
	if x != nil {
		return x.FolderData
	}
	return nil
}

func (x *PdfGenerateRequest) GetData() *PdfData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FileCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileName           string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	HashName           string `protobuf:"bytes,3,opt,name=hash_name,json=hashName,proto3" json:"hash_name,omitempty"`
	Size               string `protobuf:"bytes,4,opt,name=size,proto3" json:"size,omitempty"`
	IsPdfCard          bool   `protobuf:"varint,5,opt,name=is_pdf_card,json=isPdfCard,proto3" json:"is_pdf_card,omitempty"`
	IsPdfAgreementList bool   `protobuf:"varint,6,opt,name=is_pdf_agreement_list,json=isPdfAgreementList,proto3" json:"is_pdf_agreement_list,omitempty"`
}

func (x *FileCreate) Reset() {
	*x = FileCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCreate) ProtoMessage() {}

func (x *FileCreate) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCreate.ProtoReflect.Descriptor instead.
func (*FileCreate) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{105}
}

func (x *FileCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileCreate) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileCreate) GetHashName() string {
	if x != nil {
		return x.HashName
	}
	return ""
}

func (x *FileCreate) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *FileCreate) GetIsPdfCard() bool {
	if x != nil {
		return x.IsPdfCard
	}
	return false
}

func (x *FileCreate) GetIsPdfAgreementList() bool {
	if x != nil {
		return x.IsPdfAgreementList
	}
	return false
}

type GeneratePDFResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GeneratePDFResponse_Error
	//	*GeneratePDFResponse_CorrectGeneratePDFResponse
	Response isGeneratePDFResponse_Response `protobuf_oneof:"response"`
}

func (x *GeneratePDFResponse) Reset() {
	*x = GeneratePDFResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePDFResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePDFResponse) ProtoMessage() {}

func (x *GeneratePDFResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePDFResponse.ProtoReflect.Descriptor instead.
func (*GeneratePDFResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{106}
}

func (m *GeneratePDFResponse) GetResponse() isGeneratePDFResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GeneratePDFResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*GeneratePDFResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *GeneratePDFResponse) GetCorrectGeneratePDFResponse() *FileCreate {
	if x, ok := x.GetResponse().(*GeneratePDFResponse_CorrectGeneratePDFResponse); ok {
		return x.CorrectGeneratePDFResponse
	}
	return nil
}

type isGeneratePDFResponse_Response interface {
	isGeneratePDFResponse_Response()
}

type GeneratePDFResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type GeneratePDFResponse_CorrectGeneratePDFResponse struct {
	CorrectGeneratePDFResponse *FileCreate `protobuf:"bytes,2,opt,name=correctGeneratePDFResponse,proto3,oneof"`
}

func (*GeneratePDFResponse_Error) isGeneratePDFResponse_Response() {}

func (*GeneratePDFResponse_CorrectGeneratePDFResponse) isGeneratePDFResponse_Response() {}

type EDSCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId uint32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *EDSCheckRequest) Reset() {
	*x = EDSCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EDSCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EDSCheckRequest) ProtoMessage() {}

func (x *EDSCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EDSCheckRequest.ProtoReflect.Descriptor instead.
func (*EDSCheckRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{107}
}

func (x *EDSCheckRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type CorrectEDSCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EDS bool `protobuf:"varint,1,opt,name=EDS,proto3" json:"EDS,omitempty"`
}

func (x *CorrectEDSCheckResponse) Reset() {
	*x = CorrectEDSCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectEDSCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectEDSCheckResponse) ProtoMessage() {}

func (x *CorrectEDSCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectEDSCheckResponse.ProtoReflect.Descriptor instead.
func (*CorrectEDSCheckResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{108}
}

func (x *CorrectEDSCheckResponse) GetEDS() bool {
	if x != nil {
		return x.EDS
	}
	return false
}

type EDSCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*EDSCheckResponse_Error
	//	*EDSCheckResponse_CorrectEDSCheckResponse
	Response isEDSCheckResponse_Response `protobuf_oneof:"response"`
}

func (x *EDSCheckResponse) Reset() {
	*x = EDSCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EDSCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EDSCheckResponse) ProtoMessage() {}

func (x *EDSCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EDSCheckResponse.ProtoReflect.Descriptor instead.
func (*EDSCheckResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{109}
}

func (m *EDSCheckResponse) GetResponse() isEDSCheckResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *EDSCheckResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*EDSCheckResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *EDSCheckResponse) GetCorrectEDSCheckResponse() *CorrectEDSCheckResponse {
	if x, ok := x.GetResponse().(*EDSCheckResponse_CorrectEDSCheckResponse); ok {
		return x.CorrectEDSCheckResponse
	}
	return nil
}

type isEDSCheckResponse_Response interface {
	isEDSCheckResponse_Response()
}

type EDSCheckResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type EDSCheckResponse_CorrectEDSCheckResponse struct {
	CorrectEDSCheckResponse *CorrectEDSCheckResponse `protobuf:"bytes,2,opt,name=correctEDSCheckResponse,proto3,oneof"`
}

func (*EDSCheckResponse_Error) isEDSCheckResponse_Response() {}

func (*EDSCheckResponse_CorrectEDSCheckResponse) isEDSCheckResponse_Response() {}

type ReportTaskByTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company    string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	Group      string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Number     string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Author     string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Status     string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	DateStart  string `protobuf:"bytes,8,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	ConfStamp  string `protobuf:"bytes,9,opt,name=conf_stamp,json=confStamp,proto3" json:"conf_stamp,omitempty"`
	TaskId     uint32 `protobuf:"varint,10,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Invitation string `protobuf:"bytes,11,opt,name=invitation,proto3" json:"invitation,omitempty"`
}

func (x *ReportTaskByTypeData) Reset() {
	*x = ReportTaskByTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTaskByTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskByTypeData) ProtoMessage() {}

func (x *ReportTaskByTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskByTypeData.ProtoReflect.Descriptor instead.
func (*ReportTaskByTypeData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{110}
}

func (x *ReportTaskByTypeData) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportTaskByTypeData) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ReportTaskByTypeData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReportTaskByTypeData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *ReportTaskByTypeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportTaskByTypeData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReportTaskByTypeData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportTaskByTypeData) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *ReportTaskByTypeData) GetConfStamp() string {
	if x != nil {
		return x.ConfStamp
	}
	return ""
}

func (x *ReportTaskByTypeData) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ReportTaskByTypeData) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

type ListReportTaskByTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportTaskByTypeData []*ReportTaskByTypeData `protobuf:"bytes,1,rep,name=report_task_by_type_data,json=reportTaskByTypeData,proto3" json:"report_task_by_type_data,omitempty"`
	Context              *Context                `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"` // file_generator
}

func (x *ListReportTaskByTypeData) Reset() {
	*x = ListReportTaskByTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportTaskByTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportTaskByTypeData) ProtoMessage() {}

func (x *ListReportTaskByTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportTaskByTypeData.ProtoReflect.Descriptor instead.
func (*ListReportTaskByTypeData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{111}
}

func (x *ListReportTaskByTypeData) GetReportTaskByTypeData() []*ReportTaskByTypeData {
	if x != nil {
		return x.ReportTaskByTypeData
	}
	return nil
}

func (x *ListReportTaskByTypeData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type ReportTaskByDeptData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company     string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	Group       string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Number      string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Author      string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	DateStart   string `protobuf:"bytes,8,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	ConfStamp   string `protobuf:"bytes,9,opt,name=conf_stamp,json=confStamp,proto3" json:"conf_stamp,omitempty"`
	TaskId      uint32 `protobuf:"varint,10,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Dept        string `protobuf:"bytes,11,opt,name=dept,proto3" json:"dept,omitempty"`
	Participant string `protobuf:"bytes,12,opt,name=participant,proto3" json:"participant,omitempty"`
	Invitation  string `protobuf:"bytes,13,opt,name=invitation,proto3" json:"invitation,omitempty"`
}

func (x *ReportTaskByDeptData) Reset() {
	*x = ReportTaskByDeptData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTaskByDeptData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskByDeptData) ProtoMessage() {}

func (x *ReportTaskByDeptData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskByDeptData.ProtoReflect.Descriptor instead.
func (*ReportTaskByDeptData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{112}
}

func (x *ReportTaskByDeptData) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportTaskByDeptData) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ReportTaskByDeptData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReportTaskByDeptData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *ReportTaskByDeptData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportTaskByDeptData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReportTaskByDeptData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportTaskByDeptData) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *ReportTaskByDeptData) GetConfStamp() string {
	if x != nil {
		return x.ConfStamp
	}
	return ""
}

func (x *ReportTaskByDeptData) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ReportTaskByDeptData) GetDept() string {
	if x != nil {
		return x.Dept
	}
	return ""
}

func (x *ReportTaskByDeptData) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *ReportTaskByDeptData) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

type ListReportTaskByDeptData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportTaskByDeptData []*ReportTaskByDeptData `protobuf:"bytes,1,rep,name=report_task_by_dept_data,json=reportTaskByDeptData,proto3" json:"report_task_by_dept_data,omitempty"`
	Context              *Context                `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"` // file_generator
}

func (x *ListReportTaskByDeptData) Reset() {
	*x = ListReportTaskByDeptData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportTaskByDeptData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportTaskByDeptData) ProtoMessage() {}

func (x *ListReportTaskByDeptData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportTaskByDeptData.ProtoReflect.Descriptor instead.
func (*ListReportTaskByDeptData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{113}
}

func (x *ListReportTaskByDeptData) GetReportTaskByDeptData() []*ReportTaskByDeptData {
	if x != nil {
		return x.ReportTaskByDeptData
	}
	return nil
}

func (x *ListReportTaskByDeptData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type ReportDocByParticipantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company     string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	DocCategory string `protobuf:"bytes,2,opt,name=doc_category,json=docCategory,proto3" json:"doc_category,omitempty"`
	Number      string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Author      string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	DateStart   string `protobuf:"bytes,7,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	ConfStamp   string `protobuf:"bytes,8,opt,name=conf_stamp,json=confStamp,proto3" json:"conf_stamp,omitempty"`
	Invitation  string `protobuf:"bytes,9,opt,name=invitation,proto3" json:"invitation,omitempty"`
	DocId       uint32 `protobuf:"varint,10,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
}

func (x *ReportDocByParticipantData) Reset() {
	*x = ReportDocByParticipantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDocByParticipantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDocByParticipantData) ProtoMessage() {}

func (x *ReportDocByParticipantData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDocByParticipantData.ProtoReflect.Descriptor instead.
func (*ReportDocByParticipantData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{114}
}

func (x *ReportDocByParticipantData) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportDocByParticipantData) GetDocCategory() string {
	if x != nil {
		return x.DocCategory
	}
	return ""
}

func (x *ReportDocByParticipantData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *ReportDocByParticipantData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportDocByParticipantData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReportDocByParticipantData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportDocByParticipantData) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *ReportDocByParticipantData) GetConfStamp() string {
	if x != nil {
		return x.ConfStamp
	}
	return ""
}

func (x *ReportDocByParticipantData) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

func (x *ReportDocByParticipantData) GetDocId() uint32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

type ListReportDocByParticipantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportDocByParticipantData []*ReportDocByParticipantData `protobuf:"bytes,1,rep,name=report_doc_by_participant_data,json=reportDocByParticipantData,proto3" json:"report_doc_by_participant_data,omitempty"`
	Context                    *Context                      `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ListReportDocByParticipantData) Reset() {
	*x = ListReportDocByParticipantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportDocByParticipantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportDocByParticipantData) ProtoMessage() {}

func (x *ListReportDocByParticipantData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportDocByParticipantData.ProtoReflect.Descriptor instead.
func (*ListReportDocByParticipantData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{115}
}

func (x *ListReportDocByParticipantData) GetReportDocByParticipantData() []*ReportDocByParticipantData {
	if x != nil {
		return x.ReportDocByParticipantData
	}
	return nil
}

func (x *ListReportDocByParticipantData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type ListReportTaskByParticipantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportTaskByParticipantData []*ReportTaskByDeptData `protobuf:"bytes,1,rep,name=report_task_by_participant_data,json=reportTaskByParticipantData,proto3" json:"report_task_by_participant_data,omitempty"`
	Context                     *Context                `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"` // file_generator
}

func (x *ListReportTaskByParticipantData) Reset() {
	*x = ListReportTaskByParticipantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportTaskByParticipantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportTaskByParticipantData) ProtoMessage() {}

func (x *ListReportTaskByParticipantData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportTaskByParticipantData.ProtoReflect.Descriptor instead.
func (*ListReportTaskByParticipantData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{116}
}

func (x *ListReportTaskByParticipantData) GetReportTaskByParticipantData() []*ReportTaskByDeptData {
	if x != nil {
		return x.ReportTaskByParticipantData
	}
	return nil
}

func (x *ListReportTaskByParticipantData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type Lang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *Lang) Reset() {
	*x = Lang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lang) ProtoMessage() {}

func (x *Lang) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lang.ProtoReflect.Descriptor instead.
func (*Lang) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{117}
}

func (x *Lang) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Lang) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type Employee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsoId     int32        `protobuf:"varint,1,opt,name=sso_id,json=ssoId,proto3" json:"sso_id,omitempty"`
	FullName  string       `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	ShortName string       `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	ConfStamp *ConfStamp   `protobuf:"bytes,4,opt,name=conf_stamp,json=confStamp,proto3" json:"conf_stamp,omitempty"`
	Company   *UserCompany `protobuf:"bytes,5,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *Employee) Reset() {
	*x = Employee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Employee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Employee) ProtoMessage() {}

func (x *Employee) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Employee.ProtoReflect.Descriptor instead.
func (*Employee) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{118}
}

func (x *Employee) GetSsoId() int32 {
	if x != nil {
		return x.SsoId
	}
	return 0
}

func (x *Employee) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Employee) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Employee) GetConfStamp() *ConfStamp {
	if x != nil {
		return x.ConfStamp
	}
	return nil
}

func (x *Employee) GetCompany() *UserCompany {
	if x != nil {
		return x.Company
	}
	return nil
}

type Depart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsoId int32  `protobuf:"varint,1,opt,name=sso_id,json=ssoId,proto3" json:"sso_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Depart) Reset() {
	*x = Depart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Depart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Depart) ProtoMessage() {}

func (x *Depart) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Depart.ProtoReflect.Descriptor instead.
func (*Depart) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{119}
}

func (x *Depart) GetSsoId() int32 {
	if x != nil {
		return x.SsoId
	}
	return 0
}

func (x *Depart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsoId  int32   `protobuf:"varint,1,opt,name=sso_id,json=ssoId,proto3" json:"sso_id,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Depart *Depart `protobuf:"bytes,3,opt,name=depart,proto3" json:"depart,omitempty"`
}

func (x *UserCompany) Reset() {
	*x = UserCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCompany) ProtoMessage() {}

func (x *UserCompany) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCompany.ProtoReflect.Descriptor instead.
func (*UserCompany) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{120}
}

func (x *UserCompany) GetSsoId() int32 {
	if x != nil {
		return x.SsoId
	}
	return 0
}

func (x *UserCompany) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserCompany) GetDepart() *Depart {
	if x != nil {
		return x.Depart
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SsoId    int32       `protobuf:"varint,1,opt,name=sso_id,json=ssoId,proto3" json:"sso_id,omitempty"`
	Username string      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Iin      string      `protobuf:"bytes,3,opt,name=iin,proto3" json:"iin,omitempty"`
	Employee []*Employee `protobuf:"bytes,4,rep,name=employee,proto3" json:"employee,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{121}
}

func (x *User) GetSsoId() int32 {
	if x != nil {
		return x.SsoId
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetIin() string {
	if x != nil {
		return x.Iin
	}
	return ""
}

func (x *User) GetEmployee() []*Employee {
	if x != nil {
		return x.Employee
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User           *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Lang           *Lang  `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	SubstituteUser *User  `protobuf:"bytes,3,opt,name=substitute_user,json=substituteUser,proto3" json:"substitute_user,omitempty"`
	CompanyId      int32  `protobuf:"varint,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	Token          string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	Module         string `protobuf:"bytes,6,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{122}
}

func (x *Context) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Context) GetLang() *Lang {
	if x != nil {
		return x.Lang
	}
	return nil
}

func (x *Context) GetSubstituteUser() *User {
	if x != nil {
		return x.SubstituteUser
	}
	return nil
}

func (x *Context) GetCompanyId() int32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *Context) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Context) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type FilesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Files   []int32  `protobuf:"varint,2,rep,packed,name=files,proto3" json:"files,omitempty"`
}

func (x *FilesDeleteRequest) Reset() {
	*x = FilesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesDeleteRequest) ProtoMessage() {}

func (x *FilesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesDeleteRequest.ProtoReflect.Descriptor instead.
func (*FilesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{123}
}

func (x *FilesDeleteRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *FilesDeleteRequest) GetFiles() []int32 {
	if x != nil {
		return x.Files
	}
	return nil
}

type FilesDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*FilesDeleteResponse_Error
	//	*FilesDeleteResponse_CorrectFilesDeleteResponse
	Response isFilesDeleteResponse_Response `protobuf_oneof:"response"`
}

func (x *FilesDeleteResponse) Reset() {
	*x = FilesDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesDeleteResponse) ProtoMessage() {}

func (x *FilesDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesDeleteResponse.ProtoReflect.Descriptor instead.
func (*FilesDeleteResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{124}
}

func (m *FilesDeleteResponse) GetResponse() isFilesDeleteResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *FilesDeleteResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*FilesDeleteResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *FilesDeleteResponse) GetCorrectFilesDeleteResponse() *FilesDeleteResponseFiles {
	if x, ok := x.GetResponse().(*FilesDeleteResponse_CorrectFilesDeleteResponse); ok {
		return x.CorrectFilesDeleteResponse
	}
	return nil
}

type isFilesDeleteResponse_Response interface {
	isFilesDeleteResponse_Response()
}

type FilesDeleteResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type FilesDeleteResponse_CorrectFilesDeleteResponse struct {
	CorrectFilesDeleteResponse *FilesDeleteResponseFiles `protobuf:"bytes,2,opt,name=correctFilesDeleteResponse,proto3,oneof"`
}

func (*FilesDeleteResponse_Error) isFilesDeleteResponse_Response() {}

func (*FilesDeleteResponse_CorrectFilesDeleteResponse) isFilesDeleteResponse_Response() {}

type RouteFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	RouteId int32    `protobuf:"varint,2,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *RouteFilesRequest) Reset() {
	*x = RouteFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteFilesRequest) ProtoMessage() {}

func (x *RouteFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteFilesRequest.ProtoReflect.Descriptor instead.
func (*RouteFilesRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{125}
}

func (x *RouteFilesRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RouteFilesRequest) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type ReportDocByTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company    string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	Group      string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Type       string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Number     string `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Author     string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Status     string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	DateStart  string `protobuf:"bytes,8,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	ConfStamp  string `protobuf:"bytes,9,opt,name=conf_stamp,json=confStamp,proto3" json:"conf_stamp,omitempty"`
	Invitation string `protobuf:"bytes,10,opt,name=invitation,proto3" json:"invitation,omitempty"`
	DocId      uint32 `protobuf:"varint,11,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
}

func (x *ReportDocByTypeData) Reset() {
	*x = ReportDocByTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDocByTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDocByTypeData) ProtoMessage() {}

func (x *ReportDocByTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDocByTypeData.ProtoReflect.Descriptor instead.
func (*ReportDocByTypeData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{126}
}

func (x *ReportDocByTypeData) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportDocByTypeData) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ReportDocByTypeData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReportDocByTypeData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *ReportDocByTypeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportDocByTypeData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReportDocByTypeData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportDocByTypeData) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *ReportDocByTypeData) GetConfStamp() string {
	if x != nil {
		return x.ConfStamp
	}
	return ""
}

func (x *ReportDocByTypeData) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

func (x *ReportDocByTypeData) GetDocId() uint32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

type ListReportDocByTypeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportDocByTypeData []*ReportDocByTypeData `protobuf:"bytes,1,rep,name=report_doc_by_type_data,json=reportDocByTypeData,proto3" json:"report_doc_by_type_data,omitempty"`
	Context             *Context               `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"` // file_generator
}

func (x *ListReportDocByTypeData) Reset() {
	*x = ListReportDocByTypeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportDocByTypeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportDocByTypeData) ProtoMessage() {}

func (x *ListReportDocByTypeData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportDocByTypeData.ProtoReflect.Descriptor instead.
func (*ListReportDocByTypeData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{127}
}

func (x *ListReportDocByTypeData) GetReportDocByTypeData() []*ReportDocByTypeData {
	if x != nil {
		return x.ReportDocByTypeData
	}
	return nil
}

func (x *ListReportDocByTypeData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type ReportDocByDeptData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company     string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	DocCategory string `protobuf:"bytes,2,opt,name=doc_category,json=docCategory,proto3" json:"doc_category,omitempty"`
	Number      string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Author      string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	DateStart   string `protobuf:"bytes,7,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	ConfStamp   string `protobuf:"bytes,8,opt,name=conf_stamp,json=confStamp,proto3" json:"conf_stamp,omitempty"`
	DocId       uint32 `protobuf:"varint,9,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Dept        string `protobuf:"bytes,10,opt,name=dept,proto3" json:"dept,omitempty"`
	Invitation  string `protobuf:"bytes,11,opt,name=invitation,proto3" json:"invitation,omitempty"`
}

func (x *ReportDocByDeptData) Reset() {
	*x = ReportDocByDeptData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDocByDeptData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDocByDeptData) ProtoMessage() {}

func (x *ReportDocByDeptData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDocByDeptData.ProtoReflect.Descriptor instead.
func (*ReportDocByDeptData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{128}
}

func (x *ReportDocByDeptData) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportDocByDeptData) GetDocCategory() string {
	if x != nil {
		return x.DocCategory
	}
	return ""
}

func (x *ReportDocByDeptData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *ReportDocByDeptData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportDocByDeptData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReportDocByDeptData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportDocByDeptData) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *ReportDocByDeptData) GetConfStamp() string {
	if x != nil {
		return x.ConfStamp
	}
	return ""
}

func (x *ReportDocByDeptData) GetDocId() uint32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *ReportDocByDeptData) GetDept() string {
	if x != nil {
		return x.Dept
	}
	return ""
}

func (x *ReportDocByDeptData) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

type ListReportDocByDeptData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportDocByDeptData []*ReportDocByDeptData `protobuf:"bytes,1,rep,name=report_doc_by_dept_data,json=reportDocByDeptData,proto3" json:"report_doc_by_dept_data,omitempty"`
	Context             *Context               `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"` // file_generator
}

func (x *ListReportDocByDeptData) Reset() {
	*x = ListReportDocByDeptData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportDocByDeptData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportDocByDeptData) ProtoMessage() {}

func (x *ListReportDocByDeptData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportDocByDeptData.ProtoReflect.Descriptor instead.
func (*ListReportDocByDeptData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{129}
}

func (x *ListReportDocByDeptData) GetReportDocByDeptData() []*ReportDocByDeptData {
	if x != nil {
		return x.ReportDocByDeptData
	}
	return nil
}

func (x *ListReportDocByDeptData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type ReportDocByConfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company     string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	DocCategory string `protobuf:"bytes,2,opt,name=doc_category,json=docCategory,proto3" json:"doc_category,omitempty"`
	Number      string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Author      string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	DateStart   string `protobuf:"bytes,7,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	ConfStamp   string `protobuf:"bytes,8,opt,name=conf_stamp,json=confStamp,proto3" json:"conf_stamp,omitempty"`
	Invitation  string `protobuf:"bytes,9,opt,name=invitation,proto3" json:"invitation,omitempty"`
	DocId       uint32 `protobuf:"varint,10,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
}

func (x *ReportDocByConfData) Reset() {
	*x = ReportDocByConfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDocByConfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDocByConfData) ProtoMessage() {}

func (x *ReportDocByConfData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDocByConfData.ProtoReflect.Descriptor instead.
func (*ReportDocByConfData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{130}
}

func (x *ReportDocByConfData) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportDocByConfData) GetDocCategory() string {
	if x != nil {
		return x.DocCategory
	}
	return ""
}

func (x *ReportDocByConfData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *ReportDocByConfData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportDocByConfData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReportDocByConfData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportDocByConfData) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *ReportDocByConfData) GetConfStamp() string {
	if x != nil {
		return x.ConfStamp
	}
	return ""
}

func (x *ReportDocByConfData) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

func (x *ReportDocByConfData) GetDocId() uint32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

type ListReportDocByConfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportDocByConfData []*ReportDocByConfData `protobuf:"bytes,1,rep,name=report_doc_by_conf_data,json=reportDocByConfData,proto3" json:"report_doc_by_conf_data,omitempty"`
	Context             *Context               `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"` // file_generator
}

func (x *ListReportDocByConfData) Reset() {
	*x = ListReportDocByConfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportDocByConfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportDocByConfData) ProtoMessage() {}

func (x *ListReportDocByConfData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportDocByConfData.ProtoReflect.Descriptor instead.
func (*ListReportDocByConfData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{131}
}

func (x *ListReportDocByConfData) GetReportDocByConfData() []*ReportDocByConfData {
	if x != nil {
		return x.ReportDocByConfData
	}
	return nil
}

func (x *ListReportDocByConfData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type ReportDocByCategoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company     string `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	Number      string `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	DocCategory string `protobuf:"bytes,3,opt,name=doc_category,json=docCategory,proto3" json:"doc_category,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Author      string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	DateStart   string `protobuf:"bytes,7,opt,name=date_start,json=dateStart,proto3" json:"date_start,omitempty"`
	ConfStamp   string `protobuf:"bytes,8,opt,name=conf_stamp,json=confStamp,proto3" json:"conf_stamp,omitempty"`
	Invitation  string `protobuf:"bytes,9,opt,name=invitation,proto3" json:"invitation,omitempty"`
	DocId       uint32 `protobuf:"varint,10,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
}

func (x *ReportDocByCategoryData) Reset() {
	*x = ReportDocByCategoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDocByCategoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDocByCategoryData) ProtoMessage() {}

func (x *ReportDocByCategoryData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDocByCategoryData.ProtoReflect.Descriptor instead.
func (*ReportDocByCategoryData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{132}
}

func (x *ReportDocByCategoryData) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *ReportDocByCategoryData) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *ReportDocByCategoryData) GetDocCategory() string {
	if x != nil {
		return x.DocCategory
	}
	return ""
}

func (x *ReportDocByCategoryData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportDocByCategoryData) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ReportDocByCategoryData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ReportDocByCategoryData) GetDateStart() string {
	if x != nil {
		return x.DateStart
	}
	return ""
}

func (x *ReportDocByCategoryData) GetConfStamp() string {
	if x != nil {
		return x.ConfStamp
	}
	return ""
}

func (x *ReportDocByCategoryData) GetInvitation() string {
	if x != nil {
		return x.Invitation
	}
	return ""
}

func (x *ReportDocByCategoryData) GetDocId() uint32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

type ListReportDocByCategoryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportDocByCategoryData []*ReportDocByCategoryData `protobuf:"bytes,1,rep,name=report_doc_by_category_data,json=reportDocByCategoryData,proto3" json:"report_doc_by_category_data,omitempty"`
	Context                 *Context                   `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"` // file_generator
}

func (x *ListReportDocByCategoryData) Reset() {
	*x = ListReportDocByCategoryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportDocByCategoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportDocByCategoryData) ProtoMessage() {}

func (x *ListReportDocByCategoryData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportDocByCategoryData.ProtoReflect.Descriptor instead.
func (*ListReportDocByCategoryData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{133}
}

func (x *ListReportDocByCategoryData) GetReportDocByCategoryData() []*ReportDocByCategoryData {
	if x != nil {
		return x.ReportDocByCategoryData
	}
	return nil
}

func (x *ListReportDocByCategoryData) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type CmsDataUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context       `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Data    *CmsDataUpdate `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CmsDataUpdateRequest) Reset() {
	*x = CmsDataUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmsDataUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmsDataUpdateRequest) ProtoMessage() {}

func (x *CmsDataUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmsDataUpdateRequest.ProtoReflect.Descriptor instead.
func (*CmsDataUpdateRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{134}
}

func (x *CmsDataUpdateRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CmsDataUpdateRequest) GetData() *CmsDataUpdate {
	if x != nil {
		return x.Data
	}
	return nil
}

type CmsDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmsId int32  `protobuf:"varint,1,opt,name=cms_id,json=cmsId,proto3" json:"cms_id,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Hash  string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *CmsDataUpdate) Reset() {
	*x = CmsDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmsDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmsDataUpdate) ProtoMessage() {}

func (x *CmsDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmsDataUpdate.ProtoReflect.Descriptor instead.
func (*CmsDataUpdate) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{135}
}

func (x *CmsDataUpdate) GetCmsId() int32 {
	if x != nil {
		return x.CmsId
	}
	return 0
}

func (x *CmsDataUpdate) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CmsDataUpdate) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type SignersDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SignersDataResponseData `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *SignersDataResponse) Reset() {
	*x = SignersDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignersDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignersDataResponse) ProtoMessage() {}

func (x *SignersDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignersDataResponse.ProtoReflect.Descriptor instead.
func (*SignersDataResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{136}
}

func (x *SignersDataResponse) GetData() []*SignersDataResponseData {
	if x != nil {
		return x.Data
	}
	return nil
}

type StageParticipantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	RouteId uint32   `protobuf:"varint,2,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (x *StageParticipantsRequest) Reset() {
	*x = StageParticipantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageParticipantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageParticipantsRequest) ProtoMessage() {}

func (x *StageParticipantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageParticipantsRequest.ProtoReflect.Descriptor instead.
func (*StageParticipantsRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{137}
}

func (x *StageParticipantsRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *StageParticipantsRequest) GetRouteId() uint32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

type StageParticipantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []uint32 `protobuf:"varint,1,rep,packed,name=data,proto3" json:"data,omitempty"`
}

func (x *StageParticipantsResponse) Reset() {
	*x = StageParticipantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageParticipantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageParticipantsResponse) ProtoMessage() {}

func (x *StageParticipantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageParticipantsResponse.ProtoReflect.Descriptor instead.
func (*StageParticipantsResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{138}
}

func (x *StageParticipantsResponse) GetData() []uint32 {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTaskNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTaskNameRequest) Reset() {
	*x = GetTaskNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskNameRequest) ProtoMessage() {}

func (x *GetTaskNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskNameRequest.ProtoReflect.Descriptor instead.
func (*GetTaskNameRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{139}
}

func (x *GetTaskNameRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTaskNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTaskNameResponse) Reset() {
	*x = GetTaskNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskNameResponse) ProtoMessage() {}

func (x *GetTaskNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskNameResponse.ProtoReflect.Descriptor instead.
func (*GetTaskNameResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{140}
}

func (x *GetTaskNameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ResponsibleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId      int32               `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Participants []*ParticipantsData `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *ResponsibleData) Reset() {
	*x = ResponsibleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsibleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsibleData) ProtoMessage() {}

func (x *ResponsibleData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsibleData.ProtoReflect.Descriptor instead.
func (*ResponsibleData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{141}
}

func (x *ResponsibleData) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *ResponsibleData) GetParticipants() []*ParticipantsData {
	if x != nil {
		return x.Participants
	}
	return nil
}

type ParticipantsFromDocCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId   int32   `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	RouteData []*List `protobuf:"bytes,2,rep,name=route_data,json=routeData,proto3" json:"route_data,omitempty"`
}

func (x *ParticipantsFromDocCardRequest) Reset() {
	*x = ParticipantsFromDocCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantsFromDocCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsFromDocCardRequest) ProtoMessage() {}

func (x *ParticipantsFromDocCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsFromDocCardRequest.ProtoReflect.Descriptor instead.
func (*ParticipantsFromDocCardRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{142}
}

func (x *ParticipantsFromDocCardRequest) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *ParticipantsFromDocCardRequest) GetRouteData() []*List {
	if x != nil {
		return x.RouteData
	}
	return nil
}

type ParticipantsFromDocCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteData []*List `protobuf:"bytes,1,rep,name=route_data,json=routeData,proto3" json:"route_data,omitempty"`
}

func (x *ParticipantsFromDocCardResponse) Reset() {
	*x = ParticipantsFromDocCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantsFromDocCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantsFromDocCardResponse) ProtoMessage() {}

func (x *ParticipantsFromDocCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantsFromDocCardResponse.ProtoReflect.Descriptor instead.
func (*ParticipantsFromDocCardResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{143}
}

func (x *ParticipantsFromDocCardResponse) GetRouteData() []*List {
	if x != nil {
		return x.RouteData
	}
	return nil
}

type SimpleRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context            `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Data    *DataForSimpleRoute `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SimpleRouteRequest) Reset() {
	*x = SimpleRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRouteRequest) ProtoMessage() {}

func (x *SimpleRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRouteRequest.ProtoReflect.Descriptor instead.
func (*SimpleRouteRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{144}
}

func (x *SimpleRouteRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SimpleRouteRequest) GetData() *DataForSimpleRoute {
	if x != nil {
		return x.Data
	}
	return nil
}

type DataForSimpleRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	RouteId         int32  `protobuf:"varint,2,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	CompanyReceiver int32  `protobuf:"varint,3,opt,name=company_receiver,json=companyReceiver,proto3" json:"company_receiver,omitempty"`
	Receivers       []*ICN `protobuf:"bytes,4,rep,name=receivers,proto3" json:"receivers,omitempty"`
	Sender          *ICN   `protobuf:"bytes,5,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (x *DataForSimpleRoute) Reset() {
	*x = DataForSimpleRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataForSimpleRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataForSimpleRoute) ProtoMessage() {}

func (x *DataForSimpleRoute) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataForSimpleRoute.ProtoReflect.Descriptor instead.
func (*DataForSimpleRoute) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{145}
}

func (x *DataForSimpleRoute) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *DataForSimpleRoute) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *DataForSimpleRoute) GetCompanyReceiver() int32 {
	if x != nil {
		return x.CompanyReceiver
	}
	return 0
}

func (x *DataForSimpleRoute) GetReceivers() []*ICN {
	if x != nil {
		return x.Receivers
	}
	return nil
}

func (x *DataForSimpleRoute) GetSender() *ICN {
	if x != nil {
		return x.Sender
	}
	return nil
}

type SignByEgovRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId         int32  `protobuf:"varint,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	UserSsoId     int32  `protobuf:"varint,2,opt,name=user_sso_id,json=userSsoId,proto3" json:"user_sso_id,omitempty"`
	Type          string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Code          string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Slug          string `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
	CmsData       string `protobuf:"bytes,6,opt,name=cmsData,proto3" json:"cmsData,omitempty"`
	Token         string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	Lang          string `protobuf:"bytes,8,opt,name=lang,proto3" json:"lang,omitempty"`
	IsSimpleStart string `protobuf:"bytes,9,opt,name=is_simple_start,json=isSimpleStart,proto3" json:"is_simple_start,omitempty"`
}

func (x *SignByEgovRequest) Reset() {
	*x = SignByEgovRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignByEgovRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignByEgovRequest) ProtoMessage() {}

func (x *SignByEgovRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignByEgovRequest.ProtoReflect.Descriptor instead.
func (*SignByEgovRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{146}
}

func (x *SignByEgovRequest) GetDocId() int32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *SignByEgovRequest) GetUserSsoId() int32 {
	if x != nil {
		return x.UserSsoId
	}
	return 0
}

func (x *SignByEgovRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SignByEgovRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SignByEgovRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *SignByEgovRequest) GetCmsData() string {
	if x != nil {
		return x.CmsData
	}
	return ""
}

func (x *SignByEgovRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SignByEgovRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *SignByEgovRequest) GetIsSimpleStart() string {
	if x != nil {
		return x.IsSimpleStart
	}
	return ""
}

type RouteCEDData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteId      int32 `protobuf:"varint,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	CompanySsoId int32 `protobuf:"varint,2,opt,name=company_sso_id,json=companySsoId,proto3" json:"company_sso_id,omitempty"`
	IsMain       bool  `protobuf:"varint,3,opt,name=is_main,json=isMain,proto3" json:"is_main,omitempty"`
}

func (x *RouteCEDData) Reset() {
	*x = RouteCEDData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteCEDData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteCEDData) ProtoMessage() {}

func (x *RouteCEDData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteCEDData.ProtoReflect.Descriptor instead.
func (*RouteCEDData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{147}
}

func (x *RouteCEDData) GetRouteId() int32 {
	if x != nil {
		return x.RouteId
	}
	return 0
}

func (x *RouteCEDData) GetCompanySsoId() int32 {
	if x != nil {
		return x.CompanySsoId
	}
	return 0
}

func (x *RouteCEDData) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

type RouteCEDDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context        `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Data    []*RouteCEDData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RouteCEDDataRequest) Reset() {
	*x = RouteCEDDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteCEDDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteCEDDataRequest) ProtoMessage() {}

func (x *RouteCEDDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteCEDDataRequest.ProtoReflect.Descriptor instead.
func (*RouteCEDDataRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{148}
}

func (x *RouteCEDDataRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RouteCEDDataRequest) GetData() []*RouteCEDData {
	if x != nil {
		return x.Data
	}
	return nil
}

type EmploymentContractData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EmploymentContractData) Reset() {
	*x = EmploymentContractData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmploymentContractData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmploymentContractData) ProtoMessage() {}

func (x *EmploymentContractData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmploymentContractData.ProtoReflect.Descriptor instead.
func (*EmploymentContractData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{149}
}

func (x *EmploymentContractData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EmploymentContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmploymentContract *EmploymentContractData `protobuf:"bytes,1,opt,name=employment_contract,json=employmentContract,proto3" json:"employment_contract,omitempty"`
	Context            *Context                `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *EmploymentContractRequest) Reset() {
	*x = EmploymentContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmploymentContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmploymentContractRequest) ProtoMessage() {}

func (x *EmploymentContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmploymentContractRequest.ProtoReflect.Descriptor instead.
func (*EmploymentContractRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{150}
}

func (x *EmploymentContractRequest) GetEmploymentContract() *EmploymentContractData {
	if x != nil {
		return x.EmploymentContract
	}
	return nil
}

func (x *EmploymentContractRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type EmploymentContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*EmploymentContractResponse_Error
	//	*EmploymentContractResponse_Info
	Response isEmploymentContractResponse_Response `protobuf_oneof:"response"`
}

func (x *EmploymentContractResponse) Reset() {
	*x = EmploymentContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmploymentContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmploymentContractResponse) ProtoMessage() {}

func (x *EmploymentContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmploymentContractResponse.ProtoReflect.Descriptor instead.
func (*EmploymentContractResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{151}
}

func (m *EmploymentContractResponse) GetResponse() isEmploymentContractResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *EmploymentContractResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*EmploymentContractResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *EmploymentContractResponse) GetInfo() string {
	if x, ok := x.GetResponse().(*EmploymentContractResponse_Info); ok {
		return x.Info
	}
	return ""
}

type isEmploymentContractResponse_Response interface {
	isEmploymentContractResponse_Response()
}

type EmploymentContractResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type EmploymentContractResponse_Info struct {
	Info string `protobuf:"bytes,2,opt,name=info,proto3,oneof"`
}

func (*EmploymentContractResponse_Error) isEmploymentContractResponse_Response() {}

func (*EmploymentContractResponse_Info) isEmploymentContractResponse_Response() {}

type SignedXmlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xml       string `protobuf:"bytes,1,opt,name=xml,proto3" json:"xml,omitempty"`
	Operation string `protobuf:"bytes,2,opt,name=operation,proto3" json:"operation,omitempty"`
	DocId     int32  `protobuf:"varint,3,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	Type      string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Code      string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SignedXmlData) Reset() {
	*x = SignedXmlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedXmlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedXmlData) ProtoMessage() {}

func (x *SignedXmlData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedXmlData.ProtoReflect.Descriptor instead.
func (*SignedXmlData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{152}
}

func (x *SignedXmlData) GetXml() string {
	if x != nil {
		return x.Xml
	}
	return ""
}

func (x *SignedXmlData) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *SignedXmlData) GetDocId() int32 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *SignedXmlData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SignedXmlData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type SignedXmlAndContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedXmlData *SignedXmlData `protobuf:"bytes,1,opt,name=signed_xml_data,json=signedXmlData,proto3" json:"signed_xml_data,omitempty"`
	Context       *Context       `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *SignedXmlAndContextRequest) Reset() {
	*x = SignedXmlAndContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedXmlAndContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedXmlAndContextRequest) ProtoMessage() {}

func (x *SignedXmlAndContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedXmlAndContextRequest.ProtoReflect.Descriptor instead.
func (*SignedXmlAndContextRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{153}
}

func (x *SignedXmlAndContextRequest) GetSignedXmlData() *SignedXmlData {
	if x != nil {
		return x.SignedXmlData
	}
	return nil
}

func (x *SignedXmlAndContextRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type EnbekMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseSuccess string `protobuf:"bytes,1,opt,name=response_success,json=responseSuccess,proto3" json:"response_success,omitempty"`
	Status          string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message         string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EnbekMessageResponse) Reset() {
	*x = EnbekMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnbekMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnbekMessageResponse) ProtoMessage() {}

func (x *EnbekMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnbekMessageResponse.ProtoReflect.Descriptor instead.
func (*EnbekMessageResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{154}
}

func (x *EnbekMessageResponse) GetResponseSuccess() string {
	if x != nil {
		return x.ResponseSuccess
	}
	return ""
}

func (x *EnbekMessageResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EnbekMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AccessData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants []*ICN `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	FilesAccess  int32  `protobuf:"varint,2,opt,name=files_access,json=filesAccess,proto3" json:"files_access,omitempty"`
}

func (x *AccessData) Reset() {
	*x = AccessData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessData) ProtoMessage() {}

func (x *AccessData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessData.ProtoReflect.Descriptor instead.
func (*AccessData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{155}
}

func (x *AccessData) GetParticipants() []*ICN {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *AccessData) GetFilesAccess() int32 {
	if x != nil {
		return x.FilesAccess
	}
	return 0
}

type FilesAccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context      `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Files   []int32       `protobuf:"varint,2,rep,packed,name=files,proto3" json:"files,omitempty"`
	Data    []*AccessData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FilesAccessRequest) Reset() {
	*x = FilesAccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesAccessRequest) ProtoMessage() {}

func (x *FilesAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesAccessRequest.ProtoReflect.Descriptor instead.
func (*FilesAccessRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{156}
}

func (x *FilesAccessRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *FilesAccessRequest) GetFiles() []int32 {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FilesAccessRequest) GetData() []*AccessData {
	if x != nil {
		return x.Data
	}
	return nil
}

type FilesAccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*FilesAccessResponse_Error
	//	*FilesAccessResponse_Data
	Response isFilesAccessResponse_Response `protobuf_oneof:"response"`
}

func (x *FilesAccessResponse) Reset() {
	*x = FilesAccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesAccessResponse) ProtoMessage() {}

func (x *FilesAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesAccessResponse.ProtoReflect.Descriptor instead.
func (*FilesAccessResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{157}
}

func (m *FilesAccessResponse) GetResponse() isFilesAccessResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *FilesAccessResponse) GetError() *Error {
	if x, ok := x.GetResponse().(*FilesAccessResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *FilesAccessResponse) GetData() *emptypb.Empty {
	if x, ok := x.GetResponse().(*FilesAccessResponse_Data); ok {
		return x.Data
	}
	return nil
}

type isFilesAccessResponse_Response interface {
	isFilesAccessResponse_Response()
}

type FilesAccessResponse_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type FilesAccessResponse_Data struct {
	Data *emptypb.Empty `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*FilesAccessResponse_Error) isFilesAccessResponse_Response() {}

func (*FilesAccessResponse_Data) isFilesAccessResponse_Response() {}

type CopyFileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CopyFileData) Reset() {
	*x = CopyFileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFileData) ProtoMessage() {}

func (x *CopyFileData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFileData.ProtoReflect.Descriptor instead.
func (*CopyFileData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{158}
}

func (x *CopyFileData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CopyFileData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CopyFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context    *Context        `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	FolderData *FolderData     `protobuf:"bytes,2,opt,name=folder_data,json=folderData,proto3" json:"folder_data,omitempty"`
	Data       []*CopyFileData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CopyFilesRequest) Reset() {
	*x = CopyFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFilesRequest) ProtoMessage() {}

func (x *CopyFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFilesRequest.ProtoReflect.Descriptor instead.
func (*CopyFilesRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{159}
}

func (x *CopyFilesRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CopyFilesRequest) GetFolderData() *FolderData {
	if x != nil {
		return x.FolderData
	}
	return nil
}

func (x *CopyFilesRequest) GetData() []*CopyFileData {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	FolderId int32    `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *DeleteFolderRequest) Reset() {
	*x = DeleteFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFolderRequest) ProtoMessage() {}

func (x *DeleteFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFolderRequest.ProtoReflect.Descriptor instead.
func (*DeleteFolderRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{160}
}

func (x *DeleteFolderRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DeleteFolderRequest) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

type CreateFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context    *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	FolderName string   `protobuf:"bytes,2,opt,name=folder_name,json=folderName,proto3" json:"folder_name,omitempty"`
}

func (x *CreateFolderRequest) Reset() {
	*x = CreateFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolderRequest) ProtoMessage() {}

func (x *CreateFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolderRequest.ProtoReflect.Descriptor instead.
func (*CreateFolderRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{161}
}

func (x *CreateFolderRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CreateFolderRequest) GetFolderName() string {
	if x != nil {
		return x.FolderName
	}
	return ""
}

type CreateFolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderId int32 `protobuf:"varint,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *CreateFolderResponse) Reset() {
	*x = CreateFolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolderResponse) ProtoMessage() {}

func (x *CreateFolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolderResponse.ProtoReflect.Descriptor instead.
func (*CreateFolderResponse) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{162}
}

func (x *CreateFolderResponse) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

type CreateArchiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	CmsArr  []int32  `protobuf:"varint,2,rep,packed,name=cms_arr,json=cmsArr,proto3" json:"cms_arr,omitempty"`
}

func (x *CreateArchiveRequest) Reset() {
	*x = CreateArchiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArchiveRequest) ProtoMessage() {}

func (x *CreateArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArchiveRequest.ProtoReflect.Descriptor instead.
func (*CreateArchiveRequest) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{163}
}

func (x *CreateArchiveRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CreateArchiveRequest) GetCmsArr() []int32 {
	if x != nil {
		return x.CmsArr
	}
	return nil
}

type CorrectRouterDetailsResponse_RouterDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                 uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ActionName            string `protobuf:"bytes,2,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	IsActive              bool   `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Success               bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	SuccessEnabled        bool   `protobuf:"varint,8,opt,name=success_enabled,json=successEnabled,proto3" json:"success_enabled,omitempty"`
	Confirm               bool   `protobuf:"varint,5,opt,name=confirm,proto3" json:"confirm,omitempty"`
	ConfirmEnabled        bool   `protobuf:"varint,9,opt,name=confirm_enabled,json=confirmEnabled,proto3" json:"confirm_enabled,omitempty"`
	ConfirmDate           string `protobuf:"bytes,6,opt,name=confirm_date,json=confirmDate,proto3" json:"confirm_date,omitempty"`
	NeedAlteration        bool   `protobuf:"varint,7,opt,name=need_alteration,json=needAlteration,proto3" json:"need_alteration,omitempty"`
	NeedAlterationEnabled bool   `protobuf:"varint,10,opt,name=need_alteration_enabled,json=needAlterationEnabled,proto3" json:"need_alteration_enabled,omitempty"`
}

func (x *CorrectRouterDetailsResponse_RouterDetails) Reset() {
	*x = CorrectRouterDetailsResponse_RouterDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectRouterDetailsResponse_RouterDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectRouterDetailsResponse_RouterDetails) ProtoMessage() {}

func (x *CorrectRouterDetailsResponse_RouterDetails) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectRouterDetailsResponse_RouterDetails.ProtoReflect.Descriptor instead.
func (*CorrectRouterDetailsResponse_RouterDetails) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetSuccessEnabled() bool {
	if x != nil {
		return x.SuccessEnabled
	}
	return false
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetConfirmEnabled() bool {
	if x != nil {
		return x.ConfirmEnabled
	}
	return false
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetConfirmDate() string {
	if x != nil {
		return x.ConfirmDate
	}
	return ""
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetNeedAlteration() bool {
	if x != nil {
		return x.NeedAlteration
	}
	return false
}

func (x *CorrectRouterDetailsResponse_RouterDetails) GetNeedAlterationEnabled() bool {
	if x != nil {
		return x.NeedAlterationEnabled
	}
	return false
}

type CorrectRouterDetailsResponse_CommentCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	NeedRead bool   `protobuf:"varint,2,opt,name=need_read,json=needRead,proto3" json:"need_read,omitempty"`
}

func (x *CorrectRouterDetailsResponse_CommentCount) Reset() {
	*x = CorrectRouterDetailsResponse_CommentCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectRouterDetailsResponse_CommentCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectRouterDetailsResponse_CommentCount) ProtoMessage() {}

func (x *CorrectRouterDetailsResponse_CommentCount) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectRouterDetailsResponse_CommentCount.ProtoReflect.Descriptor instead.
func (*CorrectRouterDetailsResponse_CommentCount) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CorrectRouterDetailsResponse_CommentCount) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CorrectRouterDetailsResponse_CommentCount) GetNeedRead() bool {
	if x != nil {
		return x.NeedRead
	}
	return false
}

type CreateRouterRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ActionId          uint32 `protobuf:"varint,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	TermInDays        uint32 `protobuf:"varint,3,opt,name=term_in_days,json=termInDays,proto3" json:"term_in_days,omitempty"`
	TermInHours       uint32 `protobuf:"varint,4,opt,name=term_in_hours,json=termInHours,proto3" json:"term_in_hours,omitempty"`
	InSeries          bool   `protobuf:"varint,5,opt,name=in_series,json=inSeries,proto3" json:"in_series,omitempty"`
	CanAddParticipant bool   `protobuf:"varint,6,opt,name=can_add_participant,json=canAddParticipant,proto3" json:"can_add_participant,omitempty"`
	CanDelegate       bool   `protobuf:"varint,7,opt,name=can_delegate,json=canDelegate,proto3" json:"can_delegate,omitempty"`
	WaitForDelegates  bool   `protobuf:"varint,8,opt,name=wait_for_delegates,json=waitForDelegates,proto3" json:"wait_for_delegates,omitempty"`
	CanDecline        bool   `protobuf:"varint,9,opt,name=can_decline,json=canDecline,proto3" json:"can_decline,omitempty"`
	NeedConfirm       bool   `protobuf:"varint,10,opt,name=need_confirm,json=needConfirm,proto3" json:"need_confirm,omitempty"`
	// empl_settings employee_settings = 5;
	// act_settings action_settings = 6;
	EmployeeList []*CreateRouterRequestEmployee `protobuf:"bytes,11,rep,name=employee_list,json=employeeList,proto3" json:"employee_list,omitempty"`
}

func (x *CreateRouterRequestList) Reset() {
	*x = CreateRouterRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouterRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouterRequestList) ProtoMessage() {}

func (x *CreateRouterRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouterRequestList.ProtoReflect.Descriptor instead.
func (*CreateRouterRequestList) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{68, 0}
}

func (x *CreateRouterRequestList) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CreateRouterRequestList) GetActionId() uint32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *CreateRouterRequestList) GetTermInDays() uint32 {
	if x != nil {
		return x.TermInDays
	}
	return 0
}

func (x *CreateRouterRequestList) GetTermInHours() uint32 {
	if x != nil {
		return x.TermInHours
	}
	return 0
}

func (x *CreateRouterRequestList) GetInSeries() bool {
	if x != nil {
		return x.InSeries
	}
	return false
}

func (x *CreateRouterRequestList) GetCanAddParticipant() bool {
	if x != nil {
		return x.CanAddParticipant
	}
	return false
}

func (x *CreateRouterRequestList) GetCanDelegate() bool {
	if x != nil {
		return x.CanDelegate
	}
	return false
}

func (x *CreateRouterRequestList) GetWaitForDelegates() bool {
	if x != nil {
		return x.WaitForDelegates
	}
	return false
}

func (x *CreateRouterRequestList) GetCanDecline() bool {
	if x != nil {
		return x.CanDecline
	}
	return false
}

func (x *CreateRouterRequestList) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

func (x *CreateRouterRequestList) GetEmployeeList() []*CreateRouterRequestEmployee {
	if x != nil {
		return x.EmployeeList
	}
	return nil
}

type CreateRouterRequestEmployee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	SsoEmployeeId uint32 `protobuf:"varint,2,opt,name=sso_employee_id,json=ssoEmployeeId,proto3" json:"sso_employee_id,omitempty"`
}

func (x *CreateRouterRequestEmployee) Reset() {
	*x = CreateRouterRequestEmployee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouterRequestEmployee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouterRequestEmployee) ProtoMessage() {}

func (x *CreateRouterRequestEmployee) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouterRequestEmployee.ProtoReflect.Descriptor instead.
func (*CreateRouterRequestEmployee) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{68, 1}
}

func (x *CreateRouterRequestEmployee) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CreateRouterRequestEmployee) GetSsoEmployeeId() uint32 {
	if x != nil {
		return x.SsoEmployeeId
	}
	return 0
}

type CreateRouterRequestEmplSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanAddParticipant bool `protobuf:"varint,1,opt,name=can_add_participant,json=canAddParticipant,proto3" json:"can_add_participant,omitempty"`
	CanDelegate       bool `protobuf:"varint,2,opt,name=can_delegate,json=canDelegate,proto3" json:"can_delegate,omitempty"`
	WaitForDelegates  bool `protobuf:"varint,3,opt,name=wait_for_delegates,json=waitForDelegates,proto3" json:"wait_for_delegates,omitempty"`
}

func (x *CreateRouterRequestEmplSettings) Reset() {
	*x = CreateRouterRequestEmplSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouterRequestEmplSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouterRequestEmplSettings) ProtoMessage() {}

func (x *CreateRouterRequestEmplSettings) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouterRequestEmplSettings.ProtoReflect.Descriptor instead.
func (*CreateRouterRequestEmplSettings) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{68, 2}
}

func (x *CreateRouterRequestEmplSettings) GetCanAddParticipant() bool {
	if x != nil {
		return x.CanAddParticipant
	}
	return false
}

func (x *CreateRouterRequestEmplSettings) GetCanDelegate() bool {
	if x != nil {
		return x.CanDelegate
	}
	return false
}

func (x *CreateRouterRequestEmplSettings) GetWaitForDelegates() bool {
	if x != nil {
		return x.WaitForDelegates
	}
	return false
}

type CreateRouterRequestActSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanDecline  bool `protobuf:"varint,1,opt,name=can_decline,json=canDecline,proto3" json:"can_decline,omitempty"`
	NeedConfirm bool `protobuf:"varint,2,opt,name=need_confirm,json=needConfirm,proto3" json:"need_confirm,omitempty"`
}

func (x *CreateRouterRequestActSettings) Reset() {
	*x = CreateRouterRequestActSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRouterRequestActSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRouterRequestActSettings) ProtoMessage() {}

func (x *CreateRouterRequestActSettings) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRouterRequestActSettings.ProtoReflect.Descriptor instead.
func (*CreateRouterRequestActSettings) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{68, 3}
}

func (x *CreateRouterRequestActSettings) GetCanDecline() bool {
	if x != nil {
		return x.CanDecline
	}
	return false
}

func (x *CreateRouterRequestActSettings) GetNeedConfirm() bool {
	if x != nil {
		return x.NeedConfirm
	}
	return false
}

type CorrectResolutionsAssignmentsResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ResolutionId uint32 `protobuf:"varint,1,opt,name=resolution_id,json=resolutionId,proto3" json:"resolution_id,omitempty"`
	TaskNumber   string `protobuf:"bytes,2,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
}

func (x *CorrectResolutionsAssignmentsResponseItem) Reset() {
	*x = CorrectResolutionsAssignmentsResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectResolutionsAssignmentsResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectResolutionsAssignmentsResponseItem) ProtoMessage() {}

func (x *CorrectResolutionsAssignmentsResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectResolutionsAssignmentsResponseItem.ProtoReflect.Descriptor instead.
func (*CorrectResolutionsAssignmentsResponseItem) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{98, 0}
}

func (x *CorrectResolutionsAssignmentsResponseItem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CorrectResolutionsAssignmentsResponseItem) GetResolutionId() uint32 {
	if x != nil {
		return x.ResolutionId
	}
	return 0
}

func (x *CorrectResolutionsAssignmentsResponseItem) GetTaskNumber() string {
	if x != nil {
		return x.TaskNumber
	}
	return ""
}

type PdfData_AttachmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *PdfData_AttachmentData) Reset() {
	*x = PdfData_AttachmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfData_AttachmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfData_AttachmentData) ProtoMessage() {}

func (x *PdfData_AttachmentData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfData_AttachmentData.ProtoReflect.Descriptor instead.
func (*PdfData_AttachmentData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{103, 0}
}

func (x *PdfData_AttachmentData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PdfData_AttachmentData) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type FilesDeleteResponseFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failed []int32 `protobuf:"varint,1,rep,packed,name=failed,proto3" json:"failed,omitempty"`
}

func (x *FilesDeleteResponseFiles) Reset() {
	*x = FilesDeleteResponseFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesDeleteResponseFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesDeleteResponseFiles) ProtoMessage() {}

func (x *FilesDeleteResponseFiles) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesDeleteResponseFiles.ProtoReflect.Descriptor instead.
func (*FilesDeleteResponseFiles) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{124, 0}
}

func (x *FilesDeleteResponseFiles) GetFailed() []int32 {
	if x != nil {
		return x.Failed
	}
	return nil
}

type SignersDataResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SignedAt string `protobuf:"bytes,4,opt,name=signed_at,json=signedAt,proto3" json:"signed_at,omitempty"`
}

func (x *SignersDataResponseData) Reset() {
	*x = SignersDataResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_router_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignersDataResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignersDataResponseData) ProtoMessage() {}

func (x *SignersDataResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_router_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignersDataResponseData.ProtoReflect.Descriptor instead.
func (*SignersDataResponseData) Descriptor() ([]byte, []int) {
	return file_router_proto_rawDescGZIP(), []int{136, 0}
}

func (x *SignersDataResponseData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SignersDataResponseData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SignersDataResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignersDataResponseData) GetSignedAt() string {
	if x != nil {
		return x.SignedAt
	}
	return ""
}

var File_router_proto protoreflect.FileDescriptor

var file_router_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x15, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x15, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x02,
	0x0a, 0x0c, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x79, 0x5f, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x79, 0x45, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x65, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x45, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x44,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x04, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4f, 0x6c, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x37, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x11, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xf0, 0x03, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x65, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x22, 0x1f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x22, 0xf4, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe1, 0x05, 0x0a, 0x1c, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x64, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x68, 0x61, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x58, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xed, 0x02, 0x0a, 0x0d, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x6e, 0x65, 0x65, 0x64, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x41, 0x0a, 0x0c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x22, 0xb6, 0x01, 0x0a,
	0x15, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6a, 0x0a,
	0x1c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x73,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x73, 0x6f, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x65, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x45, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x63,
	0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6d, 0x73,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x57, 0x0a, 0x0f,
	0x43, 0x6d, 0x73, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x08, 0x43, 0x6d, 0x73, 0x49, 0x64, 0x41, 0x72,
	0x72, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x64, 0x5f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x64, 0x53, 0x22, 0x3d, 0x0a, 0x03, 0x49, 0x54, 0x43, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3d, 0x0a, 0x03, 0x49, 0x43, 0x4e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x75, 0x0a, 0x04, 0x49, 0x43, 0x4e, 0x4d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x6b, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x7a,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x22, 0xd0, 0x04, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x44, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x65,
	0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x45, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x64,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x45, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65,
	0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x65, 0x6d, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x98, 0x03,
	0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x46,
	0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69,
	0x6f, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6f, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xb3, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x11, 0x65, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x65, 0x6d, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43,
	0x4e, 0x4d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x43, 0x4e, 0x4d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x10, 0x41,
	0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x79, 0x5f, 0x65, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x45,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x65,
	0x64, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x53, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x73, 0x74,
	0x22, 0x4a, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x0a,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x0d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x44, 0x46, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x0d, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xaa, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x64, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x70, 0x64, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x64, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f,
	0x70, 0x64, 0x66, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50, 0x64, 0x66, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x0e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc,
	0x02, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x0b,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x73, 0x73, 0x6f, 0x5f, 0x65, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x73, 0x6f, 0x45, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x11, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66,
	0x75, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x4d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x13, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xa8, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x4d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x43, 0x4e, 0x4d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6d, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a,
	0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x41,
	0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x67, 0x0a, 0x1b, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x78, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x73, 0x73,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x53, 0x73, 0x6f, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3f, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x4d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x7f, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3c, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xbd, 0x01, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x09, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x70, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43,
	0x4e, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x06, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x69, 0x0a, 0x0e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x12,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x19, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x61, 0x0a, 0x19, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6d, 0x0a, 0x19, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0xaa,
	0x01, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x19,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x11, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x32, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0xff, 0x04, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x72,
	0x6d, 0x49, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x77, 0x61, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x65, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x62, 0x79, 0x45, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x79, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x45, 0x64, 0x73, 0x22, 0x77,
	0x0a, 0x1a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xc5, 0x06, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x1a, 0xac, 0x03, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x49,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x69, 0x6e,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x65,
	0x72, 0x6d, 0x49, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61,
	0x6e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x0d, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x48, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x73, 0x6f, 0x5f,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x73, 0x6f, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64,
	0x1a, 0x90, 0x01, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x63,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x22, 0x38, 0x0a, 0x1b, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x67, 0x0a, 0x1b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x73, 0x73, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x73, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x73, 0x6f, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x73, 0x6f, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22,
	0x8f, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x74, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x64, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x64, 0x0a, 0x1a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x74, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x65, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x45, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x65, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x45, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x6f, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x25, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xfe, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3a, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x11, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x33,
	0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x4d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x4d, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x13, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e,
	0x52, 0x05, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x43, 0x4e, 0x52, 0x05, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xb7, 0x01, 0x0a,
	0x1a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x66, 0x0a, 0x21, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x21, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x19, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x43, 0x4e, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x02,
	0x0a, 0x17, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x22,
	0x9f, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x10, 0x61, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xc2, 0x01, 0x0a, 0x18, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x73, 0x0a, 0x1f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1f, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x06, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x35, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x97, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x4d, 0x0a, 0x17, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xa2, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x17,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x17, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6d, 0x0a, 0x1d, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xdb, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x85, 0x01,
	0x0a, 0x25, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x25,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3a,
	0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x51, 0x0a, 0x09, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xdf, 0x19,
	0x0a, 0x07, 0x50, 0x64, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x09,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x64, 0x66, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0e,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43,
	0x4e, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x0d, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x43, 0x4e, 0x52, 0x0c, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x43, 0x4e, 0x52, 0x13, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x08, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x66, 0x42, 0x61, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52,
	0x06, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x14, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e,
	0x52, 0x12, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x15, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e,
	0x52, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x72, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x11, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x43, 0x4e, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x11, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0f, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x10, 0x76, 0x61, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e,
	0x52, 0x0e, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x76,
	0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x70,
	0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x70, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x61, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76,
	0x61, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65,
	0x77, 0x57, 0x6f, 0x72, 0x6b, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x61,
	0x7a, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x61, 0x7a, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x7a, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x7a, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x68, 0x65, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x66, 0x66, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x53, 0x74, 0x61, 0x66, 0x66, 0x1a, 0x38, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0x99, 0x01, 0x0a, 0x12, 0x50, 0x64, 0x66, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x64,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc1, 0x01, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x70, 0x64, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x64, 0x66, 0x43, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x15,
	0x69, 0x73, 0x5f, 0x70, 0x64, 0x66, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x50,
	0x64, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x9e, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x44, 0x46, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54,
	0x0a, 0x1a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x44, 0x46, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x44, 0x46, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x0a, 0x0f, 0x45, 0x44, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0x2b,
	0x0a, 0x17, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x45, 0x44, 0x53, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x44, 0x53,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x45, 0x44, 0x53, 0x22, 0xa2, 0x01, 0x0a, 0x10,
	0x45, 0x44, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x17, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x45, 0x44, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x45, 0x44, 0x53, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x45, 0x44, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xad, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x9b, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a,
	0x18, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xe3,
	0x02, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44,
	0x65, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44, 0x65, 0x70, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x54, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44, 0x65, 0x70, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44,
	0x65, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xaa, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63,
	0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x6f, 0x63, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x22,
	0xb3, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x63, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x66, 0x0a, 0x1e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x1f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44, 0x65, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x1b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x32, 0x0a, 0x04, 0x4c, 0x61, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xbe, 0x01, 0x0a,
	0x08, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x73, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x73, 0x6f, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x33, 0x0a,
	0x06, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x73, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x73, 0x6f, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x60, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x73, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x73, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x52, 0x06, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x22, 0x79, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x73, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x73,
	0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x69,
	0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x08, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x22,
	0xd1, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x35, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x22, 0x55, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x13, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x1a, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x1a, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1f,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f,
	0x63, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x51, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x62, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb7, 0x02,
	0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x44, 0x65, 0x70,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f,
	0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x65, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x44, 0x65, 0x70, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x44, 0x65, 0x70, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x44, 0x65,
	0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xa3, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0xa7, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x1b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x63, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x6c, 0x0a, 0x14, 0x43, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x0d, 0x43, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x5b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x22, 0x60,
	0x0a, 0x18, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x2f, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x68,
	0x0a, 0x1e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x12, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x43, 0x4e, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x43, 0x4e, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x53,
	0x69, 0x67, 0x6e, 0x42, 0x79, 0x45, 0x67, 0x6f, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x73, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x73, 0x6f, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x73, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22,
	0x68, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x45, 0x44, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x73, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x73, 0x6f, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x22, 0x6a, 0x0a, 0x13, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x43, 0x45, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x45, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x16, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4f, 0x0a, 0x13, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x65, 0x0a,
	0x1a, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x58, 0x6d,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x58,
	0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x78, 0x6d,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x73, 0x0a,
	0x14, 0x45, 0x6e, 0x62, 0x65, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x43, 0x4e, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x7d, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x0c, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x9c, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x33, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x33, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6d, 0x73, 0x5f,
	0x61, 0x72, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6d, 0x73, 0x41, 0x72,
	0x72, 0x32, 0xdf, 0x12, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x45, 0x44, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x45, 0x44, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x43, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x55,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x21, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6a,
	0x75, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x12, 0x4b, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x43, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x15, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x53, 0x0a, 0x11, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x16, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x43, 0x55, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x45, 0x44,
	0x53, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x45, 0x44, 0x53, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x44, 0x53, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x43, 0x6d, 0x73, 0x49, 0x64, 0x41, 0x72, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6d, 0x73, 0x49, 0x64,
	0x41, 0x72, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x43, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6d,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x45, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x11, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xc3, 0x02, 0x0a, 0x03, 0x44, 0x6f, 0x63, 0x12, 0x43, 0x0a, 0x0e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x45, 0x67, 0x6f, 0x76, 0x12, 0x19,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x79, 0x45, 0x67,
	0x6f, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x47, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x44, 0x6f, 0x63, 0x43, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x6f, 0x63, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xea, 0x01, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x44, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x26, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x0c, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x32, 0x8a, 0x02, 0x0a, 0x12, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x12, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x21, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x6f, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x58, 0x6d, 0x6c, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x62, 0x65, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x54, 0x43, 0x1a, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x62,
	0x65, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xba, 0x0a, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x44, 0x46,
	0x12, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x64, 0x66, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x64, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x44, 0x65,
	0x70, 0x74, 0x12, 0x20, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44, 0x65, 0x70, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x28, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x34,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x64, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x44, 0x46, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x44, 0x65, 0x70, 0x74, 0x12, 0x1f, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x42, 0x79, 0x44, 0x65, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c,
	0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1f, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63,
	0x42, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x1b,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x63, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x5a, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x42, 0x15,
	0x5a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_router_proto_rawDescOnce sync.Once
	file_router_proto_rawDescData = file_router_proto_rawDesc
)

func file_router_proto_rawDescGZIP() []byte {
	file_router_proto_rawDescOnce.Do(func() {
		file_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_router_proto_rawDescData)
	})
	return file_router_proto_rawDescData
}

var file_router_proto_msgTypes = make([]protoimpl.MessageInfo, 174)
var file_router_proto_goTypes = []interface{}{
	(*CorrectResultResponse)(nil),                      // 0: router.CorrectResultResponse
	(*ResultResponse)(nil),                             // 1: router.ResultResponse
	(*StepSettings)(nil),                               // 2: router.StepSettings
	(*Step)(nil),                                       // 3: router.Step
	(*ResultComment)(nil),                              // 4: router.ResultComment
	(*ResultCommentFile)(nil),                          // 5: router.ResultCommentFile
	(*Participant)(nil),                                // 6: router.Participant
	(*ResultRequest)(nil),                              // 7: router.ResultRequest
	(*RouterDetailsRequest)(nil),                       // 8: router.RouterDetailsRequest
	(*File)(nil),                                       // 9: router.File
	(*CorrectRouterDetailsResponse)(nil),               // 10: router.CorrectRouterDetailsResponse
	(*RouterDetailsResponse)(nil),                      // 11: router.RouterDetailsResponse
	(*ParticipantsData)(nil),                           // 12: router.ParticipantsData
	(*StageParticipant)(nil),                           // 13: router.StageParticipant
	(*ParticipantDecision)(nil),                        // 14: router.ParticipantDecision
	(*CmsIdArrRequest)(nil),                            // 15: router.CmsIdArrRequest
	(*CmsIdArr)(nil),                                   // 16: router.CmsIdArr
	(*ITC)(nil),                                        // 17: router.ITC
	(*ICN)(nil),                                        // 18: router.ICN
	(*ICNM)(nil),                                       // 19: router.ICNM
	(*ListSettingsData)(nil),                           // 20: router.ListSettingsData
	(*Error)(nil),                                      // 21: router.Error
	(*RouteCURequest)(nil),                             // 22: router.RouteCURequest
	(*InvitationData)(nil),                             // 23: router.InvitationData
	(*ListData)(nil),                                   // 24: router.ListData
	(*StartProcessRequest)(nil),                        // 25: router.StartProcessRequest
	(*CorrectStartProcessResponse)(nil),                // 26: router.CorrectStartProcessResponse
	(*StartProcessResponse)(nil),                       // 27: router.StartProcessResponse
	(*ActionResp)(nil),                                 // 28: router.ActionResp
	(*AdjudicationData)(nil),                           // 29: router.AdjudicationData
	(*Chunk)(nil),                                      // 30: router.Chunk
	(*FileInfo)(nil),                                   // 31: router.FileInfo
	(*FolderData)(nil),                                 // 32: router.FolderData
	(*UploadData)(nil),                                 // 33: router.UploadData
	(*UploadRequest)(nil),                              // 34: router.UploadRequest
	(*DownloadRequest)(nil),                            // 35: router.DownloadRequest
	(*GetPDFRequest)(nil),                              // 36: router.GetPDFRequest
	(*UploadedFiles)(nil),                              // 37: router.UploadedFiles
	(*GeneratedPdfData)(nil),                           // 38: router.GeneratedPdfData
	(*UploadResponse)(nil),                             // 39: router.UploadResponse
	(*DelegationData)(nil),                             // 40: router.DelegationData
	(*DelegationRequest)(nil),                          // 41: router.DelegationRequest
	(*DelegateResponseData)(nil),                       // 42: router.DelegateResponseData
	(*DelegateResponse)(nil),                           // 43: router.DelegateResponse
	(*AdjudicationRequest)(nil),                        // 44: router.AdjudicationRequest
	(*CorrectAdjudicationResponse)(nil),                // 45: router.CorrectAdjudicationResponse
	(*AdjudicationResponse)(nil),                       // 46: router.AdjudicationResponse
	(*ExpandParticipantsRequest)(nil),                  // 47: router.ExpandParticipantsRequest
	(*ParticipantForExpand)(nil),                       // 48: router.ParticipantForExpand
	(*Status)(nil),                                     // 49: router.Status
	(*StopProcessResponseData)(nil),                    // 50: router.StopProcessResponseData
	(*StopProcessResponse)(nil),                        // 51: router.StopProcessResponse
	(*NotificationData)(nil),                           // 52: router.NotificationData
	(*CurrentParticipant)(nil),                         // 53: router.CurrentParticipant
	(*AlertsRequest)(nil),                              // 54: router.AlertsRequest
	(*Alert)(nil),                                      // 55: router.Alert
	(*Alerts)(nil),                                     // 56: router.Alerts
	(*AlertsResponse)(nil),                             // 57: router.AlertsResponse
	(*ParticipantRequest)(nil),                         // 58: router.ParticipantRequest
	(*CorrectStatusListResponse)(nil),                  // 59: router.CorrectStatusListResponse
	(*StatusListResponse)(nil),                         // 60: router.StatusListResponse
	(*CorrectActionListResponse)(nil),                  // 61: router.CorrectActionListResponse
	(*ActionListResponse)(nil),                         // 62: router.ActionListResponse
	(*ActionListRequest)(nil),                          // 63: router.ActionListRequest
	(*PatternDetailsRequest)(nil),                      // 64: router.PatternDetailsRequest
	(*List)(nil),                                       // 65: router.List
	(*PatternDetailsResponseData)(nil),                 // 66: router.PatternDetailsResponseData
	(*PatternDetailsResponse)(nil),                     // 67: router.PatternDetailsResponse
	(*CreateRouterRequest)(nil),                        // 68: router.CreateRouterRequest
	(*CorrectCreateRouterResponse)(nil),                // 69: router.CorrectCreateRouterResponse
	(*CreateRouterResponse)(nil),                       // 70: router.CreateRouterResponse
	(*DetailStateRequest)(nil),                         // 71: router.DetailStateRequest
	(*CorrectDetailStateResponse)(nil),                 // 72: router.CorrectDetailStateResponse
	(*DetailStateResponse)(nil),                        // 73: router.DetailStateResponse
	(*DecisionBtn)(nil),                                // 74: router.DecisionBtn
	(*RevisionRequest)(nil),                            // 75: router.RevisionRequest
	(*RevisionData)(nil),                               // 76: router.RevisionData
	(*RevisionResponseData)(nil),                       // 77: router.RevisionResponseData
	(*OwnerReviewResponse)(nil),                        // 78: router.OwnerReviewResponse
	(*StopProcessRequest)(nil),                         // 79: router.StopProcessRequest
	(*ApproveCompletionRequest)(nil),                   // 80: router.ApproveCompletionRequest
	(*ParticipantsUpdateRequest)(nil),                  // 81: router.ParticipantsUpdateRequest
	(*ParticipantsUpdateResponse)(nil),                 // 82: router.ParticipantsUpdateResponse
	(*ActionDataResponse)(nil),                         // 83: router.ActionDataResponse
	(*MakingResolutionRequest)(nil),                    // 84: router.MakingResolutionRequest
	(*ResolutionData)(nil),                             // 85: router.ResolutionData
	(*CorrectMakingResolutionResponse)(nil),            // 86: router.CorrectMakingResolutionResponse
	(*MakingResolutionResponse)(nil),                   // 87: router.MakingResolutionResponse
	(*ConfStamp)(nil),                                  // 88: router.ConfStamp
	(*IdType)(nil),                                     // 89: router.IdType
	(*RelationRequest)(nil),                            // 90: router.RelationRequest
	(*RelationData)(nil),                               // 91: router.RelationData
	(*CorrectRelationResponse)(nil),                    // 92: router.CorrectRelationResponse
	(*RelationResponse)(nil),                           // 93: router.RelationResponse
	(*ResolutionListRequest)(nil),                      // 94: router.ResolutionListRequest
	(*ResolutionListData)(nil),                         // 95: router.ResolutionListData
	(*CorrectResolutionListResponse)(nil),              // 96: router.CorrectResolutionListResponse
	(*ResolutionListResponse)(nil),                     // 97: router.ResolutionListResponse
	(*CorrectResolutionsAssignmentsResponse)(nil),      // 98: router.CorrectResolutionsAssignmentsResponse
	(*ResolutionsAssignmentsResponse)(nil),             // 99: router.ResolutionsAssignmentsResponse
	(*Company)(nil),                                    // 100: router.Company
	(*Executor)(nil),                                   // 101: router.Executor
	(*Executors)(nil),                                  // 102: router.Executors
	(*PdfData)(nil),                                    // 103: router.PdfData
	(*PdfGenerateRequest)(nil),                         // 104: router.PdfGenerateRequest
	(*FileCreate)(nil),                                 // 105: router.FileCreate
	(*GeneratePDFResponse)(nil),                        // 106: router.GeneratePDFResponse
	(*EDSCheckRequest)(nil),                            // 107: router.EDSCheckRequest
	(*CorrectEDSCheckResponse)(nil),                    // 108: router.CorrectEDSCheckResponse
	(*EDSCheckResponse)(nil),                           // 109: router.EDSCheckResponse
	(*ReportTaskByTypeData)(nil),                       // 110: router.ReportTaskByTypeData
	(*ListReportTaskByTypeData)(nil),                   // 111: router.ListReportTaskByTypeData
	(*ReportTaskByDeptData)(nil),                       // 112: router.ReportTaskByDeptData
	(*ListReportTaskByDeptData)(nil),                   // 113: router.ListReportTaskByDeptData
	(*ReportDocByParticipantData)(nil),                 // 114: router.ReportDocByParticipantData
	(*ListReportDocByParticipantData)(nil),             // 115: router.ListReportDocByParticipantData
	(*ListReportTaskByParticipantData)(nil),            // 116: router.ListReportTaskByParticipantData
	(*Lang)(nil),                                       // 117: router.Lang
	(*Employee)(nil),                                   // 118: router.Employee
	(*Depart)(nil),                                     // 119: router.Depart
	(*UserCompany)(nil),                                // 120: router.UserCompany
	(*User)(nil),                                       // 121: router.User
	(*Context)(nil),                                    // 122: router.Context
	(*FilesDeleteRequest)(nil),                         // 123: router.FilesDeleteRequest
	(*FilesDeleteResponse)(nil),                        // 124: router.FilesDeleteResponse
	(*RouteFilesRequest)(nil),                          // 125: router.RouteFilesRequest
	(*ReportDocByTypeData)(nil),                        // 126: router.ReportDocByTypeData
	(*ListReportDocByTypeData)(nil),                    // 127: router.ListReportDocByTypeData
	(*ReportDocByDeptData)(nil),                        // 128: router.ReportDocByDeptData
	(*ListReportDocByDeptData)(nil),                    // 129: router.ListReportDocByDeptData
	(*ReportDocByConfData)(nil),                        // 130: router.ReportDocByConfData
	(*ListReportDocByConfData)(nil),                    // 131: router.ListReportDocByConfData
	(*ReportDocByCategoryData)(nil),                    // 132: router.ReportDocByCategoryData
	(*ListReportDocByCategoryData)(nil),                // 133: router.ListReportDocByCategoryData
	(*CmsDataUpdateRequest)(nil),                       // 134: router.CmsDataUpdateRequest
	(*CmsDataUpdate)(nil),                              // 135: router.CmsDataUpdate
	(*SignersDataResponse)(nil),                        // 136: router.SignersDataResponse
	(*StageParticipantsRequest)(nil),                   // 137: router.StageParticipantsRequest
	(*StageParticipantsResponse)(nil),                  // 138: router.StageParticipantsResponse
	(*GetTaskNameRequest)(nil),                         // 139: router.GetTaskNameRequest
	(*GetTaskNameResponse)(nil),                        // 140: router.GetTaskNameResponse
	(*ResponsibleData)(nil),                            // 141: router.ResponsibleData
	(*ParticipantsFromDocCardRequest)(nil),             // 142: router.ParticipantsFromDocCardRequest
	(*ParticipantsFromDocCardResponse)(nil),            // 143: router.ParticipantsFromDocCardResponse
	(*SimpleRouteRequest)(nil),                         // 144: router.SimpleRouteRequest
	(*DataForSimpleRoute)(nil),                         // 145: router.DataForSimpleRoute
	(*SignByEgovRequest)(nil),                          // 146: router.SignByEgovRequest
	(*RouteCEDData)(nil),                               // 147: router.RouteCEDData
	(*RouteCEDDataRequest)(nil),                        // 148: router.RouteCEDDataRequest
	(*EmploymentContractData)(nil),                     // 149: router.EmploymentContractData
	(*EmploymentContractRequest)(nil),                  // 150: router.EmploymentContractRequest
	(*EmploymentContractResponse)(nil),                 // 151: router.EmploymentContractResponse
	(*SignedXmlData)(nil),                              // 152: router.SignedXmlData
	(*SignedXmlAndContextRequest)(nil),                 // 153: router.SignedXmlAndContextRequest
	(*EnbekMessageResponse)(nil),                       // 154: router.EnbekMessageResponse
	(*AccessData)(nil),                                 // 155: router.AccessData
	(*FilesAccessRequest)(nil),                         // 156: router.FilesAccessRequest
	(*FilesAccessResponse)(nil),                        // 157: router.FilesAccessResponse
	(*CopyFileData)(nil),                               // 158: router.CopyFileData
	(*CopyFilesRequest)(nil),                           // 159: router.CopyFilesRequest
	(*DeleteFolderRequest)(nil),                        // 160: router.DeleteFolderRequest
	(*CreateFolderRequest)(nil),                        // 161: router.CreateFolderRequest
	(*CreateFolderResponse)(nil),                       // 162: router.CreateFolderResponse
	(*CreateArchiveRequest)(nil),                       // 163: router.CreateArchiveRequest
	(*CorrectRouterDetailsResponse_RouterDetails)(nil), // 164: router.CorrectRouterDetailsResponse.RouterDetails
	(*CorrectRouterDetailsResponse_CommentCount)(nil),  // 165: router.CorrectRouterDetailsResponse.CommentCount
	(*CreateRouterRequestList)(nil),                    // 166: router.CreateRouterRequest.list
	(*CreateRouterRequestEmployee)(nil),                // 167: router.CreateRouterRequest.employee
	(*CreateRouterRequestEmplSettings)(nil),            // 168: router.CreateRouterRequest.empl_settings
	(*CreateRouterRequestActSettings)(nil),             // 169: router.CreateRouterRequest.act_settings
	(*CorrectResolutionsAssignmentsResponseItem)(nil),  // 170: router.CorrectResolutionsAssignmentsResponse.item
	(*PdfData_AttachmentData)(nil),                     // 171: router.PdfData.AttachmentData
	(*FilesDeleteResponseFiles)(nil),                   // 172: router.FilesDeleteResponse.files
	(*SignersDataResponseData)(nil),                    // 173: router.SignersDataResponse.data
	(*emptypb.Empty)(nil),                              // 174: google.protobuf.Empty
}
var file_router_proto_depIdxs = []int32{
	3,   // 0: router.CorrectResultResponse.steps:type_name -> router.Step
	21,  // 1: router.ResultResponse.error:type_name -> router.Error
	0,   // 2: router.ResultResponse.correctResultResponse:type_name -> router.CorrectResultResponse
	2,   // 3: router.Step.settings:type_name -> router.StepSettings
	6,   // 4: router.Step.participants:type_name -> router.Participant
	5,   // 5: router.ResultComment.files:type_name -> router.ResultCommentFile
	4,   // 6: router.Participant.decision_comment:type_name -> router.ResultComment
	4,   // 7: router.Participant.delegate_comment:type_name -> router.ResultComment
	6,   // 8: router.Participant.delegates:type_name -> router.Participant
	164, // 9: router.CorrectRouterDetailsResponse.points:type_name -> router.CorrectRouterDetailsResponse.RouterDetails
	9,   // 10: router.CorrectRouterDetailsResponse.dec_files:type_name -> router.File
	165, // 11: router.CorrectRouterDetailsResponse.comments_count:type_name -> router.CorrectRouterDetailsResponse.CommentCount
	21,  // 12: router.RouterDetailsResponse.error:type_name -> router.Error
	10,  // 13: router.RouterDetailsResponse.correctRouterDetailsResponse:type_name -> router.CorrectRouterDetailsResponse
	13,  // 14: router.ParticipantsData.participant:type_name -> router.StageParticipant
	14,  // 15: router.ParticipantsData.decision:type_name -> router.ParticipantDecision
	122, // 16: router.CmsIdArrRequest.context:type_name -> router.Context
	12,  // 17: router.ListSettingsData.emp_settings_list:type_name -> router.ParticipantsData
	20,  // 18: router.RouteCURequest.list_settings_data:type_name -> router.ListSettingsData
	23,  // 19: router.RouteCURequest.invitation_data:type_name -> router.InvitationData
	12,  // 20: router.ListData.emp_settings_list:type_name -> router.ParticipantsData
	19,  // 21: router.CorrectStartProcessResponse.status:type_name -> router.ICNM
	53,  // 22: router.CorrectStartProcessResponse.current_participant:type_name -> router.CurrentParticipant
	19,  // 23: router.CorrectStartProcessResponse.action:type_name -> router.ICNM
	21,  // 24: router.StartProcessResponse.error:type_name -> router.Error
	26,  // 25: router.StartProcessResponse.data:type_name -> router.CorrectStartProcessResponse
	122, // 26: router.AdjudicationData.context:type_name -> router.Context
	32,  // 27: router.AdjudicationData.folder_data:type_name -> router.FolderData
	12,  // 28: router.AdjudicationData.participant_data:type_name -> router.ParticipantsData
	18,  // 29: router.AdjudicationData.all_participants:type_name -> router.ICN
	122, // 30: router.UploadData.context:type_name -> router.Context
	32,  // 31: router.UploadData.folder_data:type_name -> router.FolderData
	33,  // 32: router.UploadRequest.data:type_name -> router.UploadData
	30,  // 33: router.UploadRequest.chunk:type_name -> router.Chunk
	122, // 34: router.DownloadRequest.context:type_name -> router.Context
	122, // 35: router.GetPDFRequest.context:type_name -> router.Context
	31,  // 36: router.UploadedFiles.files:type_name -> router.FileInfo
	31,  // 37: router.GeneratedPdfData.files:type_name -> router.FileInfo
	21,  // 38: router.UploadResponse.error:type_name -> router.Error
	37,  // 39: router.UploadResponse.data:type_name -> router.UploadedFiles
	122, // 40: router.DelegationData.context:type_name -> router.Context
	32,  // 41: router.DelegationData.folder_data:type_name -> router.FolderData
	18,  // 42: router.DelegationData.other_participants:type_name -> router.ICN
	40,  // 43: router.DelegationRequest.data:type_name -> router.DelegationData
	30,  // 44: router.DelegationRequest.chunk:type_name -> router.Chunk
	19,  // 45: router.DelegateResponseData.action:type_name -> router.ICNM
	52,  // 46: router.DelegateResponseData.notification_data:type_name -> router.NotificationData
	21,  // 47: router.DelegateResponse.error:type_name -> router.Error
	42,  // 48: router.DelegateResponse.data:type_name -> router.DelegateResponseData
	29,  // 49: router.AdjudicationRequest.data:type_name -> router.AdjudicationData
	30,  // 50: router.AdjudicationRequest.chunk:type_name -> router.Chunk
	19,  // 51: router.CorrectAdjudicationResponse.status:type_name -> router.ICNM
	19,  // 52: router.CorrectAdjudicationResponse.action:type_name -> router.ICNM
	53,  // 53: router.CorrectAdjudicationResponse.current_participant:type_name -> router.CurrentParticipant
	21,  // 54: router.AdjudicationResponse.error:type_name -> router.Error
	45,  // 55: router.AdjudicationResponse.correctAdjudicationResponse:type_name -> router.CorrectAdjudicationResponse
	48,  // 56: router.ExpandParticipantsRequest.participants:type_name -> router.ParticipantForExpand
	19,  // 57: router.StopProcessResponseData.status:type_name -> router.ICNM
	21,  // 58: router.StopProcessResponse.error:type_name -> router.Error
	50,  // 59: router.StopProcessResponse.data:type_name -> router.StopProcessResponseData
	52,  // 60: router.CurrentParticipant.notification_data:type_name -> router.NotificationData
	18,  // 61: router.CurrentParticipant.employees:type_name -> router.ICN
	122, // 62: router.AlertsRequest.context:type_name -> router.Context
	9,   // 63: router.Alert.files:type_name -> router.File
	18,  // 64: router.Alert.action_type:type_name -> router.ICN
	18,  // 65: router.Alert.author:type_name -> router.ICN
	55,  // 66: router.Alerts.comments:type_name -> router.Alert
	21,  // 67: router.AlertsResponse.error:type_name -> router.Error
	56,  // 68: router.AlertsResponse.data:type_name -> router.Alerts
	49,  // 69: router.CorrectStatusListResponse.status_list:type_name -> router.Status
	21,  // 70: router.StatusListResponse.error:type_name -> router.Error
	59,  // 71: router.StatusListResponse.correctStatusListResponse:type_name -> router.CorrectStatusListResponse
	28,  // 72: router.CorrectActionListResponse.list:type_name -> router.ActionResp
	21,  // 73: router.ActionListResponse.error:type_name -> router.Error
	61,  // 74: router.ActionListResponse.correctActionListResponse:type_name -> router.CorrectActionListResponse
	18,  // 75: router.List.action_id:type_name -> router.ICN
	12,  // 76: router.List.participants:type_name -> router.ParticipantsData
	65,  // 77: router.PatternDetailsResponseData.lists:type_name -> router.List
	21,  // 78: router.PatternDetailsResponse.error:type_name -> router.Error
	66,  // 79: router.PatternDetailsResponse.data:type_name -> router.PatternDetailsResponseData
	166, // 80: router.CreateRouterRequest.lists:type_name -> router.CreateRouterRequest.list
	21,  // 81: router.CreateRouterResponse.error:type_name -> router.Error
	69,  // 82: router.CreateRouterResponse.correctCreateRouterResponse:type_name -> router.CorrectCreateRouterResponse
	74,  // 83: router.CorrectDetailStateResponse.decision:type_name -> router.DecisionBtn
	21,  // 84: router.DetailStateResponse.error:type_name -> router.Error
	72,  // 85: router.DetailStateResponse.correctDetailStateResponse:type_name -> router.CorrectDetailStateResponse
	76,  // 86: router.RevisionRequest.data:type_name -> router.RevisionData
	30,  // 87: router.RevisionRequest.chunk:type_name -> router.Chunk
	18,  // 88: router.RevisionData.other_participants:type_name -> router.ICN
	32,  // 89: router.RevisionData.folder_data:type_name -> router.FolderData
	122, // 90: router.RevisionData.context:type_name -> router.Context
	19,  // 91: router.RevisionResponseData.status:type_name -> router.ICNM
	19,  // 92: router.RevisionResponseData.action:type_name -> router.ICNM
	53,  // 93: router.RevisionResponseData.current_participant:type_name -> router.CurrentParticipant
	21,  // 94: router.OwnerReviewResponse.error:type_name -> router.Error
	77,  // 95: router.OwnerReviewResponse.data:type_name -> router.RevisionResponseData
	18,  // 96: router.ParticipantsUpdateRequest.to_add:type_name -> router.ICN
	18,  // 97: router.ParticipantsUpdateRequest.to_del:type_name -> router.ICN
	23,  // 98: router.ParticipantsUpdateRequest.invitation_data:type_name -> router.InvitationData
	21,  // 99: router.ParticipantsUpdateResponse.error:type_name -> router.Error
	174, // 100: router.ParticipantsUpdateResponse.correctParticipantsUpdateResponse:type_name -> google.protobuf.Empty
	21,  // 101: router.ActionDataResponse.error:type_name -> router.Error
	18,  // 102: router.ActionDataResponse.correctActionDataResponse:type_name -> router.ICN
	122, // 103: router.MakingResolutionRequest.context:type_name -> router.Context
	12,  // 104: router.MakingResolutionRequest.participant_data:type_name -> router.ParticipantsData
	85,  // 105: router.MakingResolutionRequest.data:type_name -> router.ResolutionData
	18,  // 106: router.ResolutionData.resolution_type:type_name -> router.ICN
	45,  // 107: router.CorrectMakingResolutionResponse.adjudication_data:type_name -> router.CorrectAdjudicationResponse
	85,  // 108: router.CorrectMakingResolutionResponse.data:type_name -> router.ResolutionData
	21,  // 109: router.MakingResolutionResponse.error:type_name -> router.Error
	86,  // 110: router.MakingResolutionResponse.correctMakingResolutionResponse:type_name -> router.CorrectMakingResolutionResponse
	89,  // 111: router.RelationRequest.data:type_name -> router.IdType
	18,  // 112: router.RelationData.status:type_name -> router.ICN
	88,  // 113: router.RelationData.conf:type_name -> router.ConfStamp
	91,  // 114: router.CorrectRelationResponse.relations:type_name -> router.RelationData
	21,  // 115: router.RelationResponse.error:type_name -> router.Error
	92,  // 116: router.RelationResponse.correctRelationResponse:type_name -> router.CorrectRelationResponse
	95,  // 117: router.CorrectResolutionListResponse.data:type_name -> router.ResolutionListData
	21,  // 118: router.ResolutionListResponse.error:type_name -> router.Error
	96,  // 119: router.ResolutionListResponse.correctResolutionListResponse:type_name -> router.CorrectResolutionListResponse
	170, // 120: router.CorrectResolutionsAssignmentsResponse.data:type_name -> router.CorrectResolutionsAssignmentsResponse.item
	21,  // 121: router.ResolutionsAssignmentsResponse.error:type_name -> router.Error
	98,  // 122: router.ResolutionsAssignmentsResponse.correctResolutionsAssignmentsResponse:type_name -> router.CorrectResolutionsAssignmentsResponse
	101, // 123: router.Executors.executors:type_name -> router.Executor
	65,  // 124: router.PdfData.router_data:type_name -> router.List
	100, // 125: router.PdfData.company_id:type_name -> router.Company
	102, // 126: router.PdfData.executors:type_name -> router.Executors
	171, // 127: router.PdfData.attachment:type_name -> router.PdfData.AttachmentData
	18,  // 128: router.PdfData.currency_id:type_name -> router.ICN
	18,  // 129: router.PdfData.doc_category_id:type_name -> router.ICN
	18,  // 130: router.PdfData.type_treatment:type_name -> router.ICN
	18,  // 131: router.PdfData.character_treatment:type_name -> router.ICN
	18,  // 132: router.PdfData.social_status:type_name -> router.ICN
	18,  // 133: router.PdfData.sender_receiver:type_name -> router.ICN
	18,  // 134: router.PdfData.approval_authority_id:type_name -> router.ICN
	18,  // 135: router.PdfData.depart_id:type_name -> router.ICN
	18,  // 136: router.PdfData.new_depart_id:type_name -> router.ICN
	18,  // 137: router.PdfData.update_period_id:type_name -> router.ICN
	18,  // 138: router.PdfData.conf_stamp_id:type_name -> router.ICN
	18,  // 139: router.PdfData.conf_basis_id:type_name -> router.ICN
	18,  // 140: router.PdfData.group_id:type_name -> router.ICN
	18,  // 141: router.PdfData.subgroup_id:type_name -> router.ICN
	18,  // 142: router.PdfData.case_id:type_name -> router.ICN
	18,  // 143: router.PdfData.employee_id:type_name -> router.ICN
	18,  // 144: router.PdfData.employee_category_id:type_name -> router.ICN
	18,  // 145: router.PdfData.business_trip_type_id:type_name -> router.ICN
	18,  // 146: router.PdfData.signatory_id:type_name -> router.ICN
	18,  // 147: router.PdfData.signatory_position:type_name -> router.ICN
	18,  // 148: router.PdfData.position_id:type_name -> router.ICN
	18,  // 149: router.PdfData.new_position_id:type_name -> router.ICN
	18,  // 150: router.PdfData.dismissal_reason_id:type_name -> router.ICN
	18,  // 151: router.PdfData.vacation_group_id:type_name -> router.ICN
	18,  // 152: router.PdfData.vacation_type_id:type_name -> router.ICN
	18,  // 153: router.PdfData.transfer_type_id:type_name -> router.ICN
	18,  // 154: router.PdfData.creator:type_name -> router.ICN
	122, // 155: router.PdfGenerateRequest.context:type_name -> router.Context
	32,  // 156: router.PdfGenerateRequest.folder_data:type_name -> router.FolderData
	103, // 157: router.PdfGenerateRequest.data:type_name -> router.PdfData
	21,  // 158: router.GeneratePDFResponse.error:type_name -> router.Error
	105, // 159: router.GeneratePDFResponse.correctGeneratePDFResponse:type_name -> router.FileCreate
	21,  // 160: router.EDSCheckResponse.error:type_name -> router.Error
	108, // 161: router.EDSCheckResponse.correctEDSCheckResponse:type_name -> router.CorrectEDSCheckResponse
	110, // 162: router.ListReportTaskByTypeData.report_task_by_type_data:type_name -> router.ReportTaskByTypeData
	122, // 163: router.ListReportTaskByTypeData.context:type_name -> router.Context
	112, // 164: router.ListReportTaskByDeptData.report_task_by_dept_data:type_name -> router.ReportTaskByDeptData
	122, // 165: router.ListReportTaskByDeptData.context:type_name -> router.Context
	114, // 166: router.ListReportDocByParticipantData.report_doc_by_participant_data:type_name -> router.ReportDocByParticipantData
	122, // 167: router.ListReportDocByParticipantData.context:type_name -> router.Context
	112, // 168: router.ListReportTaskByParticipantData.report_task_by_participant_data:type_name -> router.ReportTaskByDeptData
	122, // 169: router.ListReportTaskByParticipantData.context:type_name -> router.Context
	88,  // 170: router.Employee.conf_stamp:type_name -> router.ConfStamp
	120, // 171: router.Employee.company:type_name -> router.UserCompany
	119, // 172: router.UserCompany.depart:type_name -> router.Depart
	118, // 173: router.User.employee:type_name -> router.Employee
	121, // 174: router.Context.user:type_name -> router.User
	117, // 175: router.Context.lang:type_name -> router.Lang
	121, // 176: router.Context.substitute_user:type_name -> router.User
	122, // 177: router.FilesDeleteRequest.context:type_name -> router.Context
	21,  // 178: router.FilesDeleteResponse.error:type_name -> router.Error
	172, // 179: router.FilesDeleteResponse.correctFilesDeleteResponse:type_name -> router.FilesDeleteResponse.files
	122, // 180: router.RouteFilesRequest.context:type_name -> router.Context
	126, // 181: router.ListReportDocByTypeData.report_doc_by_type_data:type_name -> router.ReportDocByTypeData
	122, // 182: router.ListReportDocByTypeData.context:type_name -> router.Context
	128, // 183: router.ListReportDocByDeptData.report_doc_by_dept_data:type_name -> router.ReportDocByDeptData
	122, // 184: router.ListReportDocByDeptData.context:type_name -> router.Context
	130, // 185: router.ListReportDocByConfData.report_doc_by_conf_data:type_name -> router.ReportDocByConfData
	122, // 186: router.ListReportDocByConfData.context:type_name -> router.Context
	132, // 187: router.ListReportDocByCategoryData.report_doc_by_category_data:type_name -> router.ReportDocByCategoryData
	122, // 188: router.ListReportDocByCategoryData.context:type_name -> router.Context
	122, // 189: router.CmsDataUpdateRequest.context:type_name -> router.Context
	135, // 190: router.CmsDataUpdateRequest.data:type_name -> router.CmsDataUpdate
	173, // 191: router.SignersDataResponse.Data:type_name -> router.SignersDataResponse.data
	122, // 192: router.StageParticipantsRequest.context:type_name -> router.Context
	12,  // 193: router.ResponsibleData.participants:type_name -> router.ParticipantsData
	65,  // 194: router.ParticipantsFromDocCardRequest.route_data:type_name -> router.List
	65,  // 195: router.ParticipantsFromDocCardResponse.route_data:type_name -> router.List
	122, // 196: router.SimpleRouteRequest.context:type_name -> router.Context
	145, // 197: router.SimpleRouteRequest.data:type_name -> router.DataForSimpleRoute
	18,  // 198: router.DataForSimpleRoute.receivers:type_name -> router.ICN
	18,  // 199: router.DataForSimpleRoute.sender:type_name -> router.ICN
	122, // 200: router.RouteCEDDataRequest.context:type_name -> router.Context
	147, // 201: router.RouteCEDDataRequest.data:type_name -> router.RouteCEDData
	149, // 202: router.EmploymentContractRequest.employment_contract:type_name -> router.EmploymentContractData
	122, // 203: router.EmploymentContractRequest.context:type_name -> router.Context
	21,  // 204: router.EmploymentContractResponse.error:type_name -> router.Error
	152, // 205: router.SignedXmlAndContextRequest.signed_xml_data:type_name -> router.SignedXmlData
	122, // 206: router.SignedXmlAndContextRequest.context:type_name -> router.Context
	18,  // 207: router.AccessData.participants:type_name -> router.ICN
	122, // 208: router.FilesAccessRequest.context:type_name -> router.Context
	155, // 209: router.FilesAccessRequest.data:type_name -> router.AccessData
	21,  // 210: router.FilesAccessResponse.error:type_name -> router.Error
	174, // 211: router.FilesAccessResponse.data:type_name -> google.protobuf.Empty
	122, // 212: router.CopyFilesRequest.context:type_name -> router.Context
	32,  // 213: router.CopyFilesRequest.folder_data:type_name -> router.FolderData
	158, // 214: router.CopyFilesRequest.data:type_name -> router.CopyFileData
	122, // 215: router.DeleteFolderRequest.context:type_name -> router.Context
	122, // 216: router.CreateFolderRequest.context:type_name -> router.Context
	122, // 217: router.CreateArchiveRequest.context:type_name -> router.Context
	167, // 218: router.CreateRouterRequest.list.employee_list:type_name -> router.CreateRouterRequest.employee
	148, // 219: router.Router.RouteCEDData:input_type -> router.RouteCEDDataRequest
	7,   // 220: router.Router.GetResultInfo:input_type -> router.ResultRequest
	8,   // 221: router.Router.GetRouterDetails:input_type -> router.RouterDetailsRequest
	22,  // 222: router.Router.RouteCreateUpdate:input_type -> router.RouteCURequest
	22,  // 223: router.Router.UpdateListSettings:input_type -> router.RouteCURequest
	54,  // 224: router.Router.GetAlerts:input_type -> router.AlertsRequest
	58,  // 225: router.Router.AddParticipant:input_type -> router.ParticipantRequest
	47,  // 226: router.Router.ExpandParticipants:input_type -> router.ExpandParticipantsRequest
	81,  // 227: router.Router.ParticipantsUpdate:input_type -> router.ParticipantsUpdateRequest
	25,  // 228: router.Router.StartProcess:input_type -> router.StartProcessRequest
	79,  // 229: router.Router.StopProcess:input_type -> router.StopProcessRequest
	63,  // 230: router.Router.GetAction:input_type -> router.ActionListRequest
	41,  // 231: router.Router.Delegate:input_type -> router.DelegationRequest
	44,  // 232: router.Router.Adjudication:input_type -> router.AdjudicationRequest
	44,  // 233: router.Router.StartAndSign:input_type -> router.AdjudicationRequest
	174, // 234: router.Router.GetStatusList:input_type -> google.protobuf.Empty
	64,  // 235: router.Router.GetPatternDetails:input_type -> router.PatternDetailsRequest
	54,  // 236: router.Router.DeleteRouterPattern:input_type -> router.AlertsRequest
	71,  // 237: router.Router.StateData:input_type -> router.DetailStateRequest
	75,  // 238: router.Router.OwnerReview:input_type -> router.RevisionRequest
	80,  // 239: router.Router.ApproveCompletion:input_type -> router.ApproveCompletionRequest
	54,  // 240: router.Router.GetActionData:input_type -> router.AlertsRequest
	84,  // 241: router.Router.MakingResolution:input_type -> router.MakingResolutionRequest
	94,  // 242: router.Router.ResolutionList:input_type -> router.ResolutionListRequest
	22,  // 243: router.Router.AssignmentsRouteCreate:input_type -> router.RouteCURequest
	107, // 244: router.Router.EDSCheck:input_type -> router.EDSCheckRequest
	125, // 245: router.Router.RouteFiles:input_type -> router.RouteFilesRequest
	15,  // 246: router.Router.GetAllCmsId:input_type -> router.CmsIdArrRequest
	134, // 247: router.Router.CmsDataUpdate:input_type -> router.CmsDataUpdateRequest
	148, // 248: router.Router.SignersData:input_type -> router.RouteCEDDataRequest
	137, // 249: router.Router.StageParticipants:input_type -> router.StageParticipantsRequest
	144, // 250: router.Router.SimpleRouteCreate:input_type -> router.SimpleRouteRequest
	90,  // 251: router.Doc.RelatedDocData:input_type -> router.RelationRequest
	146, // 252: router.Doc.SignByEgov:input_type -> router.SignByEgovRequest
	141, // 253: router.Doc.GetParticipantsData:input_type -> router.ResponsibleData
	142, // 254: router.Doc.GetParticipantsFromDocCard:input_type -> router.ParticipantsFromDocCardRequest
	90,  // 255: router.Task.RelatedTaskData:input_type -> router.RelationRequest
	89,  // 256: router.Task.ResolutionsAssignments:input_type -> router.IdType
	139, // 257: router.Task.GetTaskNameByID:input_type -> router.GetTaskNameRequest
	150, // 258: router.GatewayIntegration.EmploymentContract:input_type -> router.EmploymentContractRequest
	153, // 259: router.GatewayIntegration.SendSoapRequestByOperation:input_type -> router.SignedXmlAndContextRequest
	17,  // 260: router.GatewayIntegration.GetEnbekResponse:input_type -> router.ITC
	104, // 261: router.FileStorage.GeneratePDF:input_type -> router.PdfGenerateRequest
	111, // 262: router.FileStorage.GenerateTaskReportByType:input_type -> router.ListReportTaskByTypeData
	113, // 263: router.FileStorage.GenerateTaskReportByDept:input_type -> router.ListReportTaskByDeptData
	116, // 264: router.FileStorage.GenerateTaskReportByParticipant:input_type -> router.ListReportTaskByParticipantData
	123, // 265: router.FileStorage.FilesDelete:input_type -> router.FilesDeleteRequest
	156, // 266: router.FileStorage.FilesAccess:input_type -> router.FilesAccessRequest
	34,  // 267: router.FileStorage.UploadFiles:input_type -> router.UploadRequest
	35,  // 268: router.FileStorage.DownloadFile:input_type -> router.DownloadRequest
	36,  // 269: router.FileStorage.GetPdfFile:input_type -> router.GetPDFRequest
	159, // 270: router.FileStorage.CopyFiles:input_type -> router.CopyFilesRequest
	127, // 271: router.FileStorage.GenerateDocReportByType:input_type -> router.ListReportDocByTypeData
	129, // 272: router.FileStorage.GenerateDocReportByDept:input_type -> router.ListReportDocByDeptData
	131, // 273: router.FileStorage.GenerateDocReportByConf:input_type -> router.ListReportDocByConfData
	133, // 274: router.FileStorage.GenerateDocReportByCategory:input_type -> router.ListReportDocByCategoryData
	115, // 275: router.FileStorage.GenerateDocReportByParticipant:input_type -> router.ListReportDocByParticipantData
	161, // 276: router.FileStorage.CreateFolder:input_type -> router.CreateFolderRequest
	160, // 277: router.FileStorage.DeleteFolder:input_type -> router.DeleteFolderRequest
	163, // 278: router.FileStorage.CreateArchive:input_type -> router.CreateArchiveRequest
	66,  // 279: router.Router.RouteCEDData:output_type -> router.PatternDetailsResponseData
	1,   // 280: router.Router.GetResultInfo:output_type -> router.ResultResponse
	11,  // 281: router.Router.GetRouterDetails:output_type -> router.RouterDetailsResponse
	27,  // 282: router.Router.RouteCreateUpdate:output_type -> router.StartProcessResponse
	27,  // 283: router.Router.UpdateListSettings:output_type -> router.StartProcessResponse
	57,  // 284: router.Router.GetAlerts:output_type -> router.AlertsResponse
	43,  // 285: router.Router.AddParticipant:output_type -> router.DelegateResponse
	43,  // 286: router.Router.ExpandParticipants:output_type -> router.DelegateResponse
	82,  // 287: router.Router.ParticipantsUpdate:output_type -> router.ParticipantsUpdateResponse
	27,  // 288: router.Router.StartProcess:output_type -> router.StartProcessResponse
	51,  // 289: router.Router.StopProcess:output_type -> router.StopProcessResponse
	62,  // 290: router.Router.GetAction:output_type -> router.ActionListResponse
	43,  // 291: router.Router.Delegate:output_type -> router.DelegateResponse
	46,  // 292: router.Router.Adjudication:output_type -> router.AdjudicationResponse
	46,  // 293: router.Router.StartAndSign:output_type -> router.AdjudicationResponse
	60,  // 294: router.Router.GetStatusList:output_type -> router.StatusListResponse
	67,  // 295: router.Router.GetPatternDetails:output_type -> router.PatternDetailsResponse
	174, // 296: router.Router.DeleteRouterPattern:output_type -> google.protobuf.Empty
	73,  // 297: router.Router.StateData:output_type -> router.DetailStateResponse
	78,  // 298: router.Router.OwnerReview:output_type -> router.OwnerReviewResponse
	46,  // 299: router.Router.ApproveCompletion:output_type -> router.AdjudicationResponse
	83,  // 300: router.Router.GetActionData:output_type -> router.ActionDataResponse
	87,  // 301: router.Router.MakingResolution:output_type -> router.MakingResolutionResponse
	97,  // 302: router.Router.ResolutionList:output_type -> router.ResolutionListResponse
	27,  // 303: router.Router.AssignmentsRouteCreate:output_type -> router.StartProcessResponse
	109, // 304: router.Router.EDSCheck:output_type -> router.EDSCheckResponse
	37,  // 305: router.Router.RouteFiles:output_type -> router.UploadedFiles
	16,  // 306: router.Router.GetAllCmsId:output_type -> router.CmsIdArr
	174, // 307: router.Router.CmsDataUpdate:output_type -> google.protobuf.Empty
	136, // 308: router.Router.SignersData:output_type -> router.SignersDataResponse
	138, // 309: router.Router.StageParticipants:output_type -> router.StageParticipantsResponse
	26,  // 310: router.Router.SimpleRouteCreate:output_type -> router.CorrectStartProcessResponse
	93,  // 311: router.Doc.RelatedDocData:output_type -> router.RelationResponse
	174, // 312: router.Doc.SignByEgov:output_type -> google.protobuf.Empty
	141, // 313: router.Doc.GetParticipantsData:output_type -> router.ResponsibleData
	143, // 314: router.Doc.GetParticipantsFromDocCard:output_type -> router.ParticipantsFromDocCardResponse
	93,  // 315: router.Task.RelatedTaskData:output_type -> router.RelationResponse
	99,  // 316: router.Task.ResolutionsAssignments:output_type -> router.ResolutionsAssignmentsResponse
	140, // 317: router.Task.GetTaskNameByID:output_type -> router.GetTaskNameResponse
	151, // 318: router.GatewayIntegration.EmploymentContract:output_type -> router.EmploymentContractResponse
	174, // 319: router.GatewayIntegration.SendSoapRequestByOperation:output_type -> google.protobuf.Empty
	154, // 320: router.GatewayIntegration.GetEnbekResponse:output_type -> router.EnbekMessageResponse
	38,  // 321: router.FileStorage.GeneratePDF:output_type -> router.GeneratedPdfData
	31,  // 322: router.FileStorage.GenerateTaskReportByType:output_type -> router.FileInfo
	31,  // 323: router.FileStorage.GenerateTaskReportByDept:output_type -> router.FileInfo
	31,  // 324: router.FileStorage.GenerateTaskReportByParticipant:output_type -> router.FileInfo
	124, // 325: router.FileStorage.FilesDelete:output_type -> router.FilesDeleteResponse
	157, // 326: router.FileStorage.FilesAccess:output_type -> router.FilesAccessResponse
	39,  // 327: router.FileStorage.UploadFiles:output_type -> router.UploadResponse
	30,  // 328: router.FileStorage.DownloadFile:output_type -> router.Chunk
	30,  // 329: router.FileStorage.GetPdfFile:output_type -> router.Chunk
	37,  // 330: router.FileStorage.CopyFiles:output_type -> router.UploadedFiles
	31,  // 331: router.FileStorage.GenerateDocReportByType:output_type -> router.FileInfo
	31,  // 332: router.FileStorage.GenerateDocReportByDept:output_type -> router.FileInfo
	31,  // 333: router.FileStorage.GenerateDocReportByConf:output_type -> router.FileInfo
	31,  // 334: router.FileStorage.GenerateDocReportByCategory:output_type -> router.FileInfo
	31,  // 335: router.FileStorage.GenerateDocReportByParticipant:output_type -> router.FileInfo
	162, // 336: router.FileStorage.CreateFolder:output_type -> router.CreateFolderResponse
	174, // 337: router.FileStorage.DeleteFolder:output_type -> google.protobuf.Empty
	30,  // 338: router.FileStorage.CreateArchive:output_type -> router.Chunk
	279, // [279:339] is the sub-list for method output_type
	219, // [219:279] is the sub-list for method input_type
	219, // [219:219] is the sub-list for extension type_name
	219, // [219:219] is the sub-list for extension extendee
	0,   // [0:219] is the sub-list for field type_name
}

func init() { file_router_proto_init() }
func file_router_proto_init() {
	if File_router_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultCommentFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectRouterDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmsIdArrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmsIdArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ITC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICNM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSettingsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteCURequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvitationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectStartProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjudicationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FolderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPDFRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratedPdfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjudicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectAdjudicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjudicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandParticipantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantForExpand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProcessResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectStatusListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectActionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternDetailsResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternDetailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectCreateRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectDetailStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecisionBtn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantsUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakingResolutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectMakingResolutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakingResolutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfStamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectResolutionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectResolutionsAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolutionsAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Executor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Executors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfGenerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneratePDFResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EDSCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectEDSCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EDSCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTaskByTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportTaskByTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportTaskByDeptData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportTaskByDeptData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDocByParticipantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportDocByParticipantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportTaskByParticipantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Employee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Depart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDocByTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportDocByTypeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDocByDeptData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportDocByDeptData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDocByConfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportDocByConfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDocByCategoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReportDocByCategoryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmsDataUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmsDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignersDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageParticipantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageParticipantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsibleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantsFromDocCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantsFromDocCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataForSimpleRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignByEgovRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteCEDData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteCEDDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmploymentContractData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmploymentContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmploymentContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedXmlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedXmlAndContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnbekMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesAccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesAccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArchiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectRouterDetailsResponse_RouterDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectRouterDetailsResponse_CommentCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouterRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouterRequestEmployee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouterRequestEmplSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRouterRequestActSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectResolutionsAssignmentsResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfData_AttachmentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesDeleteResponseFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_router_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignersDataResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_router_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ResultResponse_Error)(nil),
		(*ResultResponse_CorrectResultResponse)(nil),
	}
	file_router_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*RouterDetailsResponse_Error)(nil),
		(*RouterDetailsResponse_CorrectRouterDetailsResponse)(nil),
	}
	file_router_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*StartProcessResponse_Error)(nil),
		(*StartProcessResponse_Data)(nil),
	}
	file_router_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*UploadRequest_Data)(nil),
		(*UploadRequest_Chunk)(nil),
	}
	file_router_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*UploadResponse_Error)(nil),
		(*UploadResponse_Data)(nil),
	}
	file_router_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*DelegationRequest_Data)(nil),
		(*DelegationRequest_Chunk)(nil),
	}
	file_router_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*DelegateResponse_Error)(nil),
		(*DelegateResponse_Data)(nil),
	}
	file_router_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*AdjudicationRequest_Data)(nil),
		(*AdjudicationRequest_Chunk)(nil),
	}
	file_router_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*AdjudicationResponse_Error)(nil),
		(*AdjudicationResponse_CorrectAdjudicationResponse)(nil),
	}
	file_router_proto_msgTypes[51].OneofWrappers = []interface{}{
		(*StopProcessResponse_Error)(nil),
		(*StopProcessResponse_Data)(nil),
	}
	file_router_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*AlertsResponse_Error)(nil),
		(*AlertsResponse_Data)(nil),
	}
	file_router_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*StatusListResponse_Error)(nil),
		(*StatusListResponse_CorrectStatusListResponse)(nil),
	}
	file_router_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*ActionListResponse_Error)(nil),
		(*ActionListResponse_CorrectActionListResponse)(nil),
	}
	file_router_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*PatternDetailsResponse_Error)(nil),
		(*PatternDetailsResponse_Data)(nil),
	}
	file_router_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*CreateRouterResponse_Error)(nil),
		(*CreateRouterResponse_CorrectCreateRouterResponse)(nil),
	}
	file_router_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*DetailStateResponse_Error)(nil),
		(*DetailStateResponse_CorrectDetailStateResponse)(nil),
	}
	file_router_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*RevisionRequest_Data)(nil),
		(*RevisionRequest_Chunk)(nil),
	}
	file_router_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*OwnerReviewResponse_Error)(nil),
		(*OwnerReviewResponse_Data)(nil),
	}
	file_router_proto_msgTypes[82].OneofWrappers = []interface{}{
		(*ParticipantsUpdateResponse_Error)(nil),
		(*ParticipantsUpdateResponse_CorrectParticipantsUpdateResponse)(nil),
	}
	file_router_proto_msgTypes[83].OneofWrappers = []interface{}{
		(*ActionDataResponse_Error)(nil),
		(*ActionDataResponse_CorrectActionDataResponse)(nil),
	}
	file_router_proto_msgTypes[87].OneofWrappers = []interface{}{
		(*MakingResolutionResponse_Error)(nil),
		(*MakingResolutionResponse_CorrectMakingResolutionResponse)(nil),
	}
	file_router_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*RelationResponse_Error)(nil),
		(*RelationResponse_CorrectRelationResponse)(nil),
	}
	file_router_proto_msgTypes[97].OneofWrappers = []interface{}{
		(*ResolutionListResponse_Error)(nil),
		(*ResolutionListResponse_CorrectResolutionListResponse)(nil),
	}
	file_router_proto_msgTypes[99].OneofWrappers = []interface{}{
		(*ResolutionsAssignmentsResponse_Error)(nil),
		(*ResolutionsAssignmentsResponse_CorrectResolutionsAssignmentsResponse)(nil),
	}
	file_router_proto_msgTypes[106].OneofWrappers = []interface{}{
		(*GeneratePDFResponse_Error)(nil),
		(*GeneratePDFResponse_CorrectGeneratePDFResponse)(nil),
	}
	file_router_proto_msgTypes[109].OneofWrappers = []interface{}{
		(*EDSCheckResponse_Error)(nil),
		(*EDSCheckResponse_CorrectEDSCheckResponse)(nil),
	}
	file_router_proto_msgTypes[124].OneofWrappers = []interface{}{
		(*FilesDeleteResponse_Error)(nil),
		(*FilesDeleteResponse_CorrectFilesDeleteResponse)(nil),
	}
	file_router_proto_msgTypes[151].OneofWrappers = []interface{}{
		(*EmploymentContractResponse_Error)(nil),
		(*EmploymentContractResponse_Info)(nil),
	}
	file_router_proto_msgTypes[157].OneofWrappers = []interface{}{
		(*FilesAccessResponse_Error)(nil),
		(*FilesAccessResponse_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_router_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   174,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_router_proto_goTypes,
		DependencyIndexes: file_router_proto_depIdxs,
		MessageInfos:      file_router_proto_msgTypes,
	}.Build()
	File_router_proto = out.File
	file_router_proto_rawDesc = nil
	file_router_proto_goTypes = nil
	file_router_proto_depIdxs = nil
}
